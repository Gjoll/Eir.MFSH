//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MFSHParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MFSH.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class MFSHParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		MSTART=1, LINE=2, CR=3, Err=4, MINCLUDE=5, MDEFINE=6, MENDDEF=7, MAPPLY=8, 
		MEND=9, MSTRING=10, MOPAR=11, MCOMMA=12, MCPAR=13, MPNAME=14, MWS=15, 
		MErr=16;
	public const int
		RULE_document = 0, RULE_fsh = 1, RULE_macro = 2, RULE_mStart = 3, RULE_mEnd = 4, 
		RULE_mCommand = 5, RULE_mInclude = 6, RULE_mDefine = 7, RULE_mApply = 8, 
		RULE_mEndDef = 9;
	public static readonly string[] ruleNames = {
		"document", "fsh", "macro", "mStart", "mEnd", "mCommand", "mInclude", 
		"mDefine", "mApply", "mEndDef"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'\r'", null, "'include'", "'define'", "'enddef'", "'apply'", 
		null, null, "'('", "','", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "MSTART", "LINE", "CR", "Err", "MINCLUDE", "MDEFINE", "MENDDEF", 
		"MAPPLY", "MEND", "MSTRING", "MOPAR", "MCOMMA", "MCPAR", "MPNAME", "MWS", 
		"MErr"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MFSHParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MFSHParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MFSHParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MFSHParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocumentContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(MFSHParser.Eof, 0); }
		public FshContext[] fsh() {
			return GetRuleContexts<FshContext>();
		}
		public FshContext fsh(int i) {
			return GetRuleContext<FshContext>(i);
		}
		public MacroContext[] macro() {
			return GetRuleContexts<MacroContext>();
		}
		public MacroContext macro(int i) {
			return GetRuleContext<MacroContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MSTART || _la==LINE) {
				{
				State = 22;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LINE:
					{
					State = 20; fsh();
					}
					break;
				case MSTART:
					{
					State = 21; macro();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 26;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 27; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FshContext : ParserRuleContext {
		public ITerminalNode LINE() { return GetToken(MFSHParser.LINE, 0); }
		public FshContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fsh; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFsh(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FshContext fsh() {
		FshContext _localctx = new FshContext(Context, State);
		EnterRule(_localctx, 2, RULE_fsh);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29; Match(LINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroContext : ParserRuleContext {
		public MStartContext mStart() {
			return GetRuleContext<MStartContext>(0);
		}
		public MEndContext mEnd() {
			return GetRuleContext<MEndContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(MFSHParser.Eof, 0); }
		public MCommandContext[] mCommand() {
			return GetRuleContexts<MCommandContext>();
		}
		public MCommandContext mCommand(int i) {
			return GetRuleContext<MCommandContext>(i);
		}
		public MacroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacro(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroContext macro() {
		MacroContext _localctx = new MacroContext(Context, State);
		EnterRule(_localctx, 4, RULE_macro);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31; mStart();
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 32; mCommand();
				}
				}
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MINCLUDE) | (1L << MDEFINE) | (1L << MENDDEF) | (1L << MAPPLY))) != 0) );
			State = 39;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MEND:
				{
				State = 37; mEnd();
				}
				break;
			case Eof:
				{
				State = 38; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MStartContext : ParserRuleContext {
		public ITerminalNode MSTART() { return GetToken(MFSHParser.MSTART, 0); }
		public MStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mStart; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MStartContext mStart() {
		MStartContext _localctx = new MStartContext(Context, State);
		EnterRule(_localctx, 6, RULE_mStart);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41; Match(MSTART);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MEndContext : ParserRuleContext {
		public ITerminalNode MEND() { return GetToken(MFSHParser.MEND, 0); }
		public MEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mEnd; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MEndContext mEnd() {
		MEndContext _localctx = new MEndContext(Context, State);
		EnterRule(_localctx, 8, RULE_mEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43; Match(MEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MCommandContext : ParserRuleContext {
		public MIncludeContext mInclude() {
			return GetRuleContext<MIncludeContext>(0);
		}
		public MDefineContext mDefine() {
			return GetRuleContext<MDefineContext>(0);
		}
		public MApplyContext mApply() {
			return GetRuleContext<MApplyContext>(0);
		}
		public MEndDefContext mEndDef() {
			return GetRuleContext<MEndDefContext>(0);
		}
		public MCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mCommand; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MCommandContext mCommand() {
		MCommandContext _localctx = new MCommandContext(Context, State);
		EnterRule(_localctx, 10, RULE_mCommand);
		try {
			State = 49;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MINCLUDE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 45; mInclude();
				}
				break;
			case MDEFINE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 46; mDefine();
				}
				break;
			case MAPPLY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 47; mApply();
				}
				break;
			case MENDDEF:
				EnterOuterAlt(_localctx, 4);
				{
				State = 48; mEndDef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MIncludeContext : ParserRuleContext {
		public ITerminalNode MINCLUDE() { return GetToken(MFSHParser.MINCLUDE, 0); }
		public ITerminalNode MSTRING() { return GetToken(MFSHParser.MSTRING, 0); }
		public MIncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mInclude; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMInclude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MIncludeContext mInclude() {
		MIncludeContext _localctx = new MIncludeContext(Context, State);
		EnterRule(_localctx, 12, RULE_mInclude);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51; Match(MINCLUDE);
			State = 52; Match(MSTRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MDefineContext : ParserRuleContext {
		public ITerminalNode MDEFINE() { return GetToken(MFSHParser.MDEFINE, 0); }
		public ITerminalNode[] MPNAME() { return GetTokens(MFSHParser.MPNAME); }
		public ITerminalNode MPNAME(int i) {
			return GetToken(MFSHParser.MPNAME, i);
		}
		public ITerminalNode MOPAR() { return GetToken(MFSHParser.MOPAR, 0); }
		public ITerminalNode MCPAR() { return GetToken(MFSHParser.MCPAR, 0); }
		public ITerminalNode[] MCOMMA() { return GetTokens(MFSHParser.MCOMMA); }
		public ITerminalNode MCOMMA(int i) {
			return GetToken(MFSHParser.MCOMMA, i);
		}
		public MDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mDefine; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MDefineContext mDefine() {
		MDefineContext _localctx = new MDefineContext(Context, State);
		EnterRule(_localctx, 14, RULE_mDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; Match(MDEFINE);
			State = 55; Match(MPNAME);
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MOPAR) {
				{
				State = 56; Match(MOPAR);
				State = 57; Match(MPNAME);
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==MCOMMA) {
					{
					{
					State = 58; Match(MCOMMA);
					State = 59; Match(MPNAME);
					}
					}
					State = 64;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 65; Match(MCPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MApplyContext : ParserRuleContext {
		public ITerminalNode MAPPLY() { return GetToken(MFSHParser.MAPPLY, 0); }
		public ITerminalNode MPNAME() { return GetToken(MFSHParser.MPNAME, 0); }
		public ITerminalNode MOPAR() { return GetToken(MFSHParser.MOPAR, 0); }
		public ITerminalNode MCPAR() { return GetToken(MFSHParser.MCPAR, 0); }
		public ITerminalNode[] MSTRING() { return GetTokens(MFSHParser.MSTRING); }
		public ITerminalNode MSTRING(int i) {
			return GetToken(MFSHParser.MSTRING, i);
		}
		public ITerminalNode[] MCOMMA() { return GetTokens(MFSHParser.MCOMMA); }
		public ITerminalNode MCOMMA(int i) {
			return GetToken(MFSHParser.MCOMMA, i);
		}
		public MApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mApply; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMApply(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MApplyContext mApply() {
		MApplyContext _localctx = new MApplyContext(Context, State);
		EnterRule(_localctx, 16, RULE_mApply);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; Match(MAPPLY);
			State = 69; Match(MPNAME);
			State = 70; Match(MOPAR);
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MSTRING) {
				{
				State = 71; Match(MSTRING);
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==MCOMMA) {
					{
					{
					State = 72; Match(MCOMMA);
					State = 73; Match(MSTRING);
					}
					}
					State = 78;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 81; Match(MCPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MEndDefContext : ParserRuleContext {
		public ITerminalNode MENDDEF() { return GetToken(MFSHParser.MENDDEF, 0); }
		public MEndDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mEndDef; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMEndDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MEndDefContext mEndDef() {
		MEndDefContext _localctx = new MEndDefContext(Context, State);
		EnterRule(_localctx, 18, RULE_mEndDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83; Match(MENDDEF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x12', 'X', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x19', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', '\x1C', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x6', '\x4', '$', '\n', 
		'\x4', '\r', '\x4', '\xE', '\x4', '%', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', '*', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'\x34', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', 
		'\t', '?', '\n', '\t', '\f', '\t', '\xE', '\t', '\x42', '\v', '\t', '\x3', 
		'\t', '\x5', '\t', '\x45', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', 'M', '\n', '\n', 
		'\f', '\n', '\xE', '\n', 'P', '\v', '\n', '\x5', '\n', 'R', '\n', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x2', 
		'\x2', '\f', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x2', '\x2', '\x2', 'X', '\x2', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x6', '!', '\x3', '\x2', 
		'\x2', '\x2', '\b', '+', '\x3', '\x2', '\x2', '\x2', '\n', '-', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\x33', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x10', '\x38', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x46', '\x3', '\x2', '\x2', '\x2', '\x14', 'U', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x19', '\x5', '\x4', '\x3', '\x2', '\x17', 
		'\x19', '\x5', '\x6', '\x4', '\x2', '\x18', '\x16', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x17', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1C', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x18', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\a', 
		'\x2', '\x2', '\x3', '\x1E', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		' ', '\a', '\x4', '\x2', '\x2', ' ', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'!', '#', '\x5', '\b', '\x5', '\x2', '\"', '$', '\x5', '\f', '\a', '\x2', 
		'#', '\"', '\x3', '\x2', '\x2', '\x2', '$', '%', '\x3', '\x2', '\x2', 
		'\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', '%', '&', '\x3', '\x2', '\x2', 
		'\x2', '&', ')', '\x3', '\x2', '\x2', '\x2', '\'', '*', '\x5', '\n', '\x6', 
		'\x2', '(', '*', '\a', '\x2', '\x2', '\x3', ')', '\'', '\x3', '\x2', '\x2', 
		'\x2', ')', '(', '\x3', '\x2', '\x2', '\x2', '*', '\a', '\x3', '\x2', 
		'\x2', '\x2', '+', ',', '\a', '\x3', '\x2', '\x2', ',', '\t', '\x3', '\x2', 
		'\x2', '\x2', '-', '.', '\a', '\v', '\x2', '\x2', '.', '\v', '\x3', '\x2', 
		'\x2', '\x2', '/', '\x34', '\x5', '\xE', '\b', '\x2', '\x30', '\x34', 
		'\x5', '\x10', '\t', '\x2', '\x31', '\x34', '\x5', '\x12', '\n', '\x2', 
		'\x32', '\x34', '\x5', '\x14', '\v', '\x2', '\x33', '/', '\x3', '\x2', 
		'\x2', '\x2', '\x33', '\x30', '\x3', '\x2', '\x2', '\x2', '\x33', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x33', '\x32', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\r', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\a', '\a', 
		'\x2', '\x2', '\x36', '\x37', '\a', '\f', '\x2', '\x2', '\x37', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\a', '\b', '\x2', '\x2', 
		'\x39', '\x44', '\a', '\x10', '\x2', '\x2', ':', ';', '\a', '\r', '\x2', 
		'\x2', ';', '@', '\a', '\x10', '\x2', '\x2', '<', '=', '\a', '\xE', '\x2', 
		'\x2', '=', '?', '\a', '\x10', '\x2', '\x2', '>', '<', '\x3', '\x2', '\x2', 
		'\x2', '?', '\x42', '\x3', '\x2', '\x2', '\x2', '@', '>', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x41', '\x3', '\x2', '\x2', '\x2', '\x41', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '@', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x45', '\a', '\xF', '\x2', '\x2', '\x44', ':', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x45', '\x3', '\x2', '\x2', '\x2', '\x45', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\x46', 'G', '\a', '\n', '\x2', '\x2', 'G', 'H', '\a', '\x10', 
		'\x2', '\x2', 'H', 'Q', '\a', '\r', '\x2', '\x2', 'I', 'N', '\a', '\f', 
		'\x2', '\x2', 'J', 'K', '\a', '\xE', '\x2', '\x2', 'K', 'M', '\a', '\f', 
		'\x2', '\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 'M', 'P', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'R', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', 
		'\x2', '\x2', 'Q', 'I', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\a', '\xF', 
		'\x2', '\x2', 'T', '\x13', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\a', 
		'\t', '\x2', '\x2', 'V', '\x15', '\x3', '\x2', '\x2', '\x2', '\v', '\x18', 
		'\x1A', '%', ')', '\x33', '@', '\x44', 'N', 'Q',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MFSH.Antlr
