//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MFSHParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Eir.MFSH.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class MFSHParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		MFSH=1, TEXTA=2, TEXTB=3, TEXTC=4, TEXTD=5, TICKTEXT=6, CR=7, APPLY=8, 
		CALL=9, END=10, IF=11, ELSE=12, FRAGMENT=13, INCOMPATIBLE=14, MACRO=15, 
		ONCE=16, SET=17, USE=18, PARENT=19, TITLE=20, DESCRIPTION=21, STRING=22, 
		MULTILINE_STRING=23, OPAR=24, COMMA=25, CPAR=26, COLON=27, BANG=28, FS=29, 
		GT=30, LT=31, GE=32, LE=33, EQ=34, EQ2=35, NAME=36, NUMBER=37, CMNT=38, 
		MFSHCont=39, MFSHExit=40, MFSHCR=41, MFSH_SPACE=42;
	public const int
		RULE_document = 0, RULE_command = 1, RULE_textA = 2, RULE_textB = 3, RULE_textC = 4, 
		RULE_textD = 5, RULE_tickText = 6, RULE_mfshExit = 7, RULE_mfshCmds = 8, 
		RULE_mfshCmd = 9, RULE_apply = 10, RULE_end = 11, RULE_description = 12, 
		RULE_frag = 13, RULE_incompatible = 14, RULE_macro = 15, RULE_redirect = 16, 
		RULE_parent = 17, RULE_set = 18, RULE_call = 19, RULE_title = 20, RULE_path = 21, 
		RULE_use = 22, RULE_if = 23, RULE_elseIf = 24, RULE_else = 25, RULE_condition = 26, 
		RULE_conditionBoolIs = 27, RULE_conditionBoolIsNot = 28, RULE_conditionStrEq = 29, 
		RULE_conditionNumEq = 30, RULE_conditionNumLt = 31, RULE_conditionNumLe = 32, 
		RULE_conditionNumGt = 33, RULE_conditionNumGe = 34, RULE_conditionValueNum = 35, 
		RULE_conditionValueStr = 36, RULE_anyString = 37, RULE_nameString = 38, 
		RULE_multiLineString = 39, RULE_singleString = 40;
	public static readonly string[] ruleNames = {
		"document", "command", "textA", "textB", "textC", "textD", "tickText", 
		"mfshExit", "mfshCmds", "mfshCmd", "apply", "end", "description", "frag", 
		"incompatible", "macro", "redirect", "parent", "set", "call", "title", 
		"path", "use", "if", "elseIf", "else", "condition", "conditionBoolIs", 
		"conditionBoolIsNot", "conditionStrEq", "conditionNumEq", "conditionNumLt", 
		"conditionNumLe", "conditionNumGt", "conditionNumGe", "conditionValueNum", 
		"conditionValueStr", "anyString", "nameString", "multiLineString", "singleString"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'apply'", "'call'", "'end'", 
		"'if'", "'else'", "'Fragment'", "'incompatible'", "'macro'", "'once'", 
		"'set'", "'use'", "'Parent'", "'Title'", "'Description'", null, null, 
		"'('", "','", "')'", "':'", "'!'", "'/'", "'>'", "'<'", "'>='", "'<='", 
		"'=='", "'='", null, null, null, null, "'\\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "MFSH", "TEXTA", "TEXTB", "TEXTC", "TEXTD", "TICKTEXT", "CR", "APPLY", 
		"CALL", "END", "IF", "ELSE", "FRAGMENT", "INCOMPATIBLE", "MACRO", "ONCE", 
		"SET", "USE", "PARENT", "TITLE", "DESCRIPTION", "STRING", "MULTILINE_STRING", 
		"OPAR", "COMMA", "CPAR", "COLON", "BANG", "FS", "GT", "LT", "GE", "LE", 
		"EQ", "EQ2", "NAME", "NUMBER", "CMNT", "MFSHCont", "MFSHExit", "MFSHCR", 
		"MFSH_SPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MFSHParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MFSHParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MFSHParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MFSHParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MFSHParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 1099511627902L) != 0) {
				{
				{
				State = 82;
				command();
				}
				}
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 88;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextAContext textA() {
			return GetRuleContext<TextAContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextBContext textB() {
			return GetRuleContext<TextBContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextCContext textC() {
			return GetRuleContext<TextCContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextDContext textD() {
			return GetRuleContext<TextDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TickTextContext tickText() {
			return GetRuleContext<TickTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MfshExitContext mfshExit() {
			return GetRuleContext<MfshExitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MfshCmdsContext mfshCmds() {
			return GetRuleContext<MfshCmdsContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 2, RULE_command);
		try {
			State = 97;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TEXTA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 90;
				textA();
				}
				break;
			case TEXTB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 91;
				textB();
				}
				break;
			case TEXTC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 92;
				textC();
				}
				break;
			case TEXTD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 93;
				textD();
				}
				break;
			case TICKTEXT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 94;
				tickText();
				}
				break;
			case MFSHExit:
				EnterOuterAlt(_localctx, 6);
				{
				State = 95;
				mfshExit();
				}
				break;
			case MFSH:
				EnterOuterAlt(_localctx, 7);
				{
				State = 96;
				mfshCmds();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextAContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXTA() { return GetToken(MFSHParser.TEXTA, 0); }
		public TextAContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textA; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextA(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextAContext textA() {
		TextAContext _localctx = new TextAContext(Context, State);
		EnterRule(_localctx, 4, RULE_textA);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			Match(TEXTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextBContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXTB() { return GetToken(MFSHParser.TEXTB, 0); }
		public TextBContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textB; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextB(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextBContext textB() {
		TextBContext _localctx = new TextBContext(Context, State);
		EnterRule(_localctx, 6, RULE_textB);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			Match(TEXTB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextCContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXTC() { return GetToken(MFSHParser.TEXTC, 0); }
		public TextCContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textC; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextC(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextCContext textC() {
		TextCContext _localctx = new TextCContext(Context, State);
		EnterRule(_localctx, 8, RULE_textC);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(TEXTC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextDContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXTD() { return GetToken(MFSHParser.TEXTD, 0); }
		public TextDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textD; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextD(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextDContext textD() {
		TextDContext _localctx = new TextDContext(Context, State);
		EnterRule(_localctx, 10, RULE_textD);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(TEXTD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TickTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TICKTEXT() { return GetToken(MFSHParser.TICKTEXT, 0); }
		public TickTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tickText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTickText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TickTextContext tickText() {
		TickTextContext _localctx = new TickTextContext(Context, State);
		EnterRule(_localctx, 12, RULE_tickText);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(TICKTEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MfshExitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MFSHExit() { return GetToken(MFSHParser.MFSHExit, 0); }
		public MfshExitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mfshExit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMfshExit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MfshExitContext mfshExit() {
		MfshExitContext _localctx = new MfshExitContext(Context, State);
		EnterRule(_localctx, 14, RULE_mfshExit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(MFSHExit);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MfshCmdsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MFSH() { return GetToken(MFSHParser.MFSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MfshCmdContext[] mfshCmd() {
			return GetRuleContexts<MfshCmdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MfshCmdContext mfshCmd(int i) {
			return GetRuleContext<MfshCmdContext>(i);
		}
		public MfshCmdsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mfshCmds; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMfshCmds(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MfshCmdsContext mfshCmds() {
		MfshCmdsContext _localctx = new MfshCmdsContext(Context, State);
		EnterRule(_localctx, 16, RULE_mfshCmds);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(MFSH);
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 4128512L) != 0) {
				{
				{
				State = 112;
				mfshCmd();
				}
				}
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MfshCmdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ApplyContext apply() {
			return GetRuleContext<ApplyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndContext end() {
			return GetRuleContext<EndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfContext elseIf() {
			return GetRuleContext<ElseIfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseContext @else() {
			return GetRuleContext<ElseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FragContext frag() {
			return GetRuleContext<FragContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncompatibleContext incompatible() {
			return GetRuleContext<IncompatibleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroContext macro() {
			return GetRuleContext<MacroContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParentContext parent() {
			return GetRuleContext<ParentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TitleContext title() {
			return GetRuleContext<TitleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseContext use() {
			return GetRuleContext<UseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public MfshCmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mfshCmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMfshCmd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MfshCmdContext mfshCmd() {
		MfshCmdContext _localctx = new MfshCmdContext(Context, State);
		EnterRule(_localctx, 18, RULE_mfshCmd);
		try {
			State = 132;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 118;
				apply();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 119;
				description();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 120;
				end();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 121;
				@if();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 122;
				elseIf();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 123;
				@else();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 124;
				set();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 125;
				frag();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 126;
				incompatible();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 127;
				macro();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 128;
				parent();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 129;
				title();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 130;
				use();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 131;
				call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ApplyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APPLY() { return GetToken(MFSHParser.APPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(MFSHParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(MFSHParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(MFSHParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONCE() { return GetToken(MFSHParser.ONCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnyStringContext[] anyString() {
			return GetRuleContexts<AnyStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnyStringContext anyString(int i) {
			return GetRuleContext<AnyStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MFSHParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MFSHParser.COMMA, i);
		}
		public ApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_apply; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitApply(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ApplyContext apply() {
		ApplyContext _localctx = new ApplyContext(Context, State);
		EnterRule(_localctx, 20, RULE_apply);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(APPLY);
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ONCE) {
				{
				State = 135;
				Match(ONCE);
				}
			}

			State = 138;
			Match(NAME);
			State = 139;
			Match(OPAR);
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING || _la==MULTILINE_STRING) {
				{
				State = 140;
				anyString();
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 141;
					Match(COMMA);
					State = 142;
					anyString();
					}
					}
					State = 147;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 150;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MFSHParser.END, 0); }
		public EndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndContext end() {
		EndContext _localctx = new EndContext(Context, State);
		EnterRule(_localctx, 22, RULE_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescriptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIPTION() { return GetToken(MFSHParser.DESCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MFSHParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnyStringContext anyString() {
			return GetRuleContext<AnyStringContext>(0);
		}
		public DescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_description; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescription(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescriptionContext description() {
		DescriptionContext _localctx = new DescriptionContext(Context, State);
		EnterRule(_localctx, 24, RULE_description);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			Match(DESCRIPTION);
			State = 155;
			Match(COLON);
			State = 156;
			anyString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FragContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FRAGMENT() { return GetToken(MFSHParser.FRAGMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MFSHParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(MFSHParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONCE() { return GetToken(MFSHParser.ONCE, 0); }
		public FragContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FragContext frag() {
		FragContext _localctx = new FragContext(Context, State);
		EnterRule(_localctx, 26, RULE_frag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			Match(FRAGMENT);
			State = 159;
			Match(COLON);
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ONCE) {
				{
				State = 160;
				Match(ONCE);
				}
			}

			State = 163;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncompatibleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCOMPATIBLE() { return GetToken(MFSHParser.INCOMPATIBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(MFSHParser.NAME, 0); }
		public IncompatibleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incompatible; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncompatible(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncompatibleContext incompatible() {
		IncompatibleContext _localctx = new IncompatibleContext(Context, State);
		EnterRule(_localctx, 28, RULE_incompatible);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			Match(INCOMPATIBLE);
			State = 166;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACRO() { return GetToken(MFSHParser.MACRO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(MFSHParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(MFSHParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(MFSHParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONCE() { return GetToken(MFSHParser.ONCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(MFSHParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RedirectContext redirect() {
			return GetRuleContext<RedirectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MFSHParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MFSHParser.COMMA, i);
		}
		public MacroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacro(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroContext macro() {
		MacroContext _localctx = new MacroContext(Context, State);
		EnterRule(_localctx, 30, RULE_macro);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			Match(MACRO);
			State = 170;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ONCE) {
				{
				State = 169;
				Match(ONCE);
				}
			}

			State = 172;
			Match(NAME);
			State = 173;
			Match(OPAR);
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 174;
				Match(NAME);
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 175;
					Match(COMMA);
					State = 176;
					Match(NAME);
					}
					}
					State = 181;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CPAR) {
				{
				State = 184;
				Match(CPAR);
				}
			}

			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GT) {
				{
				State = 187;
				redirect();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedirectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(MFSHParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleStringContext singleString() {
			return GetRuleContext<SingleStringContext>(0);
		}
		public RedirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redirect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedirect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedirectContext redirect() {
		RedirectContext _localctx = new RedirectContext(Context, State);
		EnterRule(_localctx, 32, RULE_redirect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			Match(GT);
			State = 191;
			singleString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENT() { return GetToken(MFSHParser.PARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MFSHParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(MFSHParser.NAME, 0); }
		public ParentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParentContext parent() {
		ParentContext _localctx = new ParentContext(Context, State);
		EnterRule(_localctx, 34, RULE_parent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			Match(PARENT);
			State = 194;
			Match(COLON);
			State = 195;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MFSHParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(MFSHParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ2() { return GetToken(MFSHParser.EQ2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnyStringContext anyString() {
			return GetRuleContext<AnyStringContext>(0);
		}
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(Context, State);
		EnterRule(_localctx, 36, RULE_set);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			Match(SET);
			State = 198;
			Match(NAME);
			State = 199;
			Match(EQ2);
			State = 200;
			anyString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(MFSHParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameStringContext[] nameString() {
			return GetRuleContexts<NameStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameStringContext nameString(int i) {
			return GetRuleContext<NameStringContext>(i);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 38, RULE_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			Match(CALL);
			State = 203;
			path();
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 68732059648L) != 0) {
				{
				{
				State = 204;
				nameString();
				}
				}
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TitleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TITLE() { return GetToken(MFSHParser.TITLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MFSHParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnyStringContext anyString() {
			return GetRuleContext<AnyStringContext>(0);
		}
		public TitleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_title; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTitle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TitleContext title() {
		TitleContext _localctx = new TitleContext(Context, State);
		EnterRule(_localctx, 40, RULE_title);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(TITLE);
			State = 211;
			Match(COLON);
			State = 212;
			anyString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameStringContext[] nameString() {
			return GetRuleContexts<NameStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameStringContext nameString(int i) {
			return GetRuleContext<NameStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FS() { return GetTokens(MFSHParser.FS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FS(int i) {
			return GetToken(MFSHParser.FS, i);
		}
		public PathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathContext path() {
		PathContext _localctx = new PathContext(Context, State);
		EnterRule(_localctx, 42, RULE_path);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			nameString();
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FS) {
				{
				{
				State = 215;
				Match(FS);
				State = 216;
				nameString();
				}
				}
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(MFSHParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(MFSHParser.NAME, 0); }
		public UseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_use; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseContext use() {
		UseContext _localctx = new UseContext(Context, State);
		EnterRule(_localctx, 44, RULE_use);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(USE);
			State = 223;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MFSHParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 46, RULE_if);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			Match(IF);
			State = 226;
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MFSHParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MFSHParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ElseIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfContext elseIf() {
		ElseIfContext _localctx = new ElseIfContext(Context, State);
		EnterRule(_localctx, 48, RULE_elseIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			Match(ELSE);
			State = 229;
			Match(IF);
			State = 230;
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MFSHParser.ELSE, 0); }
		public ElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseContext @else() {
		ElseContext _localctx = new ElseContext(Context, State);
		EnterRule(_localctx, 50, RULE_else);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			Match(ELSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionStrEqContext conditionStrEq() {
			return GetRuleContext<ConditionStrEqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionBoolIsContext conditionBoolIs() {
			return GetRuleContext<ConditionBoolIsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionBoolIsNotContext conditionBoolIsNot() {
			return GetRuleContext<ConditionBoolIsNotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionNumEqContext conditionNumEq() {
			return GetRuleContext<ConditionNumEqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionNumLtContext conditionNumLt() {
			return GetRuleContext<ConditionNumLtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionNumLeContext conditionNumLe() {
			return GetRuleContext<ConditionNumLeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionNumGtContext conditionNumGt() {
			return GetRuleContext<ConditionNumGtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionNumGeContext conditionNumGe() {
			return GetRuleContext<ConditionNumGeContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 52, RULE_condition);
		try {
			State = 242;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 234;
				conditionStrEq();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 235;
				conditionBoolIs();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 236;
				conditionBoolIsNot();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 237;
				conditionNumEq();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 238;
				conditionNumLt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 239;
				conditionNumLe();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 240;
				conditionNumGt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 241;
				conditionNumGe();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionBoolIsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(MFSHParser.NAME, 0); }
		public ConditionBoolIsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionBoolIs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionBoolIs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionBoolIsContext conditionBoolIs() {
		ConditionBoolIsContext _localctx = new ConditionBoolIsContext(Context, State);
		EnterRule(_localctx, 54, RULE_conditionBoolIs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionBoolIsNotContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(MFSHParser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(MFSHParser.NAME, 0); }
		public ConditionBoolIsNotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionBoolIsNot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionBoolIsNot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionBoolIsNotContext conditionBoolIsNot() {
		ConditionBoolIsNotContext _localctx = new ConditionBoolIsNotContext(Context, State);
		EnterRule(_localctx, 56, RULE_conditionBoolIsNot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			Match(BANG);
			State = 247;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionStrEqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnyStringContext[] anyString() {
			return GetRuleContexts<AnyStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnyStringContext anyString(int i) {
			return GetRuleContext<AnyStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(MFSHParser.EQ, 0); }
		public ConditionStrEqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionStrEq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionStrEq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionStrEqContext conditionStrEq() {
		ConditionStrEqContext _localctx = new ConditionStrEqContext(Context, State);
		EnterRule(_localctx, 58, RULE_conditionStrEq);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			anyString();
			State = 250;
			Match(EQ);
			State = 251;
			anyString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionNumEqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionValueNumContext[] conditionValueNum() {
			return GetRuleContexts<ConditionValueNumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionValueNumContext conditionValueNum(int i) {
			return GetRuleContext<ConditionValueNumContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(MFSHParser.EQ, 0); }
		public ConditionNumEqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionNumEq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionNumEq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionNumEqContext conditionNumEq() {
		ConditionNumEqContext _localctx = new ConditionNumEqContext(Context, State);
		EnterRule(_localctx, 60, RULE_conditionNumEq);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			conditionValueNum();
			State = 254;
			Match(EQ);
			State = 255;
			conditionValueNum();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionNumLtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionValueNumContext[] conditionValueNum() {
			return GetRuleContexts<ConditionValueNumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionValueNumContext conditionValueNum(int i) {
			return GetRuleContext<ConditionValueNumContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(MFSHParser.LT, 0); }
		public ConditionNumLtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionNumLt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionNumLt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionNumLtContext conditionNumLt() {
		ConditionNumLtContext _localctx = new ConditionNumLtContext(Context, State);
		EnterRule(_localctx, 62, RULE_conditionNumLt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			conditionValueNum();
			State = 258;
			Match(LT);
			State = 259;
			conditionValueNum();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionNumLeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionValueNumContext[] conditionValueNum() {
			return GetRuleContexts<ConditionValueNumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionValueNumContext conditionValueNum(int i) {
			return GetRuleContext<ConditionValueNumContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(MFSHParser.LE, 0); }
		public ConditionNumLeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionNumLe; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionNumLe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionNumLeContext conditionNumLe() {
		ConditionNumLeContext _localctx = new ConditionNumLeContext(Context, State);
		EnterRule(_localctx, 64, RULE_conditionNumLe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			conditionValueNum();
			State = 262;
			Match(LE);
			State = 263;
			conditionValueNum();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionNumGtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionValueNumContext[] conditionValueNum() {
			return GetRuleContexts<ConditionValueNumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionValueNumContext conditionValueNum(int i) {
			return GetRuleContext<ConditionValueNumContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(MFSHParser.GT, 0); }
		public ConditionNumGtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionNumGt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionNumGt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionNumGtContext conditionNumGt() {
		ConditionNumGtContext _localctx = new ConditionNumGtContext(Context, State);
		EnterRule(_localctx, 66, RULE_conditionNumGt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			conditionValueNum();
			State = 266;
			Match(GT);
			State = 267;
			conditionValueNum();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionNumGeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionValueNumContext[] conditionValueNum() {
			return GetRuleContexts<ConditionValueNumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionValueNumContext conditionValueNum(int i) {
			return GetRuleContext<ConditionValueNumContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(MFSHParser.GE, 0); }
		public ConditionNumGeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionNumGe; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionNumGe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionNumGeContext conditionNumGe() {
		ConditionNumGeContext _localctx = new ConditionNumGeContext(Context, State);
		EnterRule(_localctx, 68, RULE_conditionNumGe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			conditionValueNum();
			State = 270;
			Match(GE);
			State = 271;
			conditionValueNum();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionValueNumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(MFSHParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(MFSHParser.NUMBER, 0); }
		public ConditionValueNumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionValueNum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionValueNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionValueNumContext conditionValueNum() {
		ConditionValueNumContext _localctx = new ConditionValueNumContext(Context, State);
		EnterRule(_localctx, 70, RULE_conditionValueNum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			_la = TokenStream.LA(1);
			if ( !(_la==NAME || _la==NUMBER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionValueStrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnyStringContext anyString() {
			return GetRuleContext<AnyStringContext>(0);
		}
		public ConditionValueStrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionValueStr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionValueStr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionValueStrContext conditionValueStr() {
		ConditionValueStrContext _localctx = new ConditionValueStrContext(Context, State);
		EnterRule(_localctx, 72, RULE_conditionValueStr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			anyString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnyStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleStringContext singleString() {
			return GetRuleContext<SingleStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiLineStringContext multiLineString() {
			return GetRuleContext<MultiLineStringContext>(0);
		}
		public AnyStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anyString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnyString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnyStringContext anyString() {
		AnyStringContext _localctx = new AnyStringContext(Context, State);
		EnterRule(_localctx, 74, RULE_anyString);
		try {
			State = 279;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 277;
				singleString();
				}
				break;
			case MULTILINE_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 278;
				multiLineString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(MFSHParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleStringContext singleString() {
			return GetRuleContext<SingleStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiLineStringContext multiLineString() {
			return GetRuleContext<MultiLineStringContext>(0);
		}
		public NameStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameStringContext nameString() {
		NameStringContext _localctx = new NameStringContext(Context, State);
		EnterRule(_localctx, 76, RULE_nameString);
		try {
			State = 284;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 281;
				Match(NAME);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 282;
				singleString();
				}
				break;
			case MULTILINE_STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 283;
				multiLineString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiLineStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINE_STRING() { return GetToken(MFSHParser.MULTILINE_STRING, 0); }
		public MultiLineStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiLineString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiLineString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiLineStringContext multiLineString() {
		MultiLineStringContext _localctx = new MultiLineStringContext(Context, State);
		EnterRule(_localctx, 78, RULE_multiLineString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			Match(MULTILINE_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(MFSHParser.STRING, 0); }
		public SingleStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleStringContext singleString() {
		SingleStringContext _localctx = new SingleStringContext(Context, State);
		EnterRule(_localctx, 80, RULE_singleString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,42,291,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,1,0,5,0,84,8,0,10,0,
		12,0,87,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,98,8,1,1,2,1,2,1,3,
		1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,5,8,114,8,8,10,8,12,8,117,
		9,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,133,8,
		9,1,10,1,10,3,10,137,8,10,1,10,1,10,1,10,1,10,1,10,5,10,144,8,10,10,10,
		12,10,147,9,10,3,10,149,8,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,
		13,1,13,1,13,3,13,162,8,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,3,15,171,
		8,15,1,15,1,15,1,15,1,15,1,15,5,15,178,8,15,10,15,12,15,181,9,15,3,15,
		183,8,15,1,15,3,15,186,8,15,1,15,3,15,189,8,15,1,16,1,16,1,16,1,17,1,17,
		1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,5,19,206,8,19,10,19,
		12,19,209,9,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,5,21,218,8,21,10,21,
		12,21,221,9,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,
		1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,243,8,26,1,27,1,27,1,
		28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,
		31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,
		35,1,36,1,36,1,37,1,37,3,37,280,8,37,1,38,1,38,1,38,3,38,285,8,38,1,39,
		1,39,1,40,1,40,1,40,0,0,41,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,
		32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,
		80,0,1,1,0,36,37,291,0,85,1,0,0,0,2,97,1,0,0,0,4,99,1,0,0,0,6,101,1,0,
		0,0,8,103,1,0,0,0,10,105,1,0,0,0,12,107,1,0,0,0,14,109,1,0,0,0,16,111,
		1,0,0,0,18,132,1,0,0,0,20,134,1,0,0,0,22,152,1,0,0,0,24,154,1,0,0,0,26,
		158,1,0,0,0,28,165,1,0,0,0,30,168,1,0,0,0,32,190,1,0,0,0,34,193,1,0,0,
		0,36,197,1,0,0,0,38,202,1,0,0,0,40,210,1,0,0,0,42,214,1,0,0,0,44,222,1,
		0,0,0,46,225,1,0,0,0,48,228,1,0,0,0,50,232,1,0,0,0,52,242,1,0,0,0,54,244,
		1,0,0,0,56,246,1,0,0,0,58,249,1,0,0,0,60,253,1,0,0,0,62,257,1,0,0,0,64,
		261,1,0,0,0,66,265,1,0,0,0,68,269,1,0,0,0,70,273,1,0,0,0,72,275,1,0,0,
		0,74,279,1,0,0,0,76,284,1,0,0,0,78,286,1,0,0,0,80,288,1,0,0,0,82,84,3,
		2,1,0,83,82,1,0,0,0,84,87,1,0,0,0,85,83,1,0,0,0,85,86,1,0,0,0,86,88,1,
		0,0,0,87,85,1,0,0,0,88,89,5,0,0,1,89,1,1,0,0,0,90,98,3,4,2,0,91,98,3,6,
		3,0,92,98,3,8,4,0,93,98,3,10,5,0,94,98,3,12,6,0,95,98,3,14,7,0,96,98,3,
		16,8,0,97,90,1,0,0,0,97,91,1,0,0,0,97,92,1,0,0,0,97,93,1,0,0,0,97,94,1,
		0,0,0,97,95,1,0,0,0,97,96,1,0,0,0,98,3,1,0,0,0,99,100,5,2,0,0,100,5,1,
		0,0,0,101,102,5,3,0,0,102,7,1,0,0,0,103,104,5,4,0,0,104,9,1,0,0,0,105,
		106,5,5,0,0,106,11,1,0,0,0,107,108,5,6,0,0,108,13,1,0,0,0,109,110,5,40,
		0,0,110,15,1,0,0,0,111,115,5,1,0,0,112,114,3,18,9,0,113,112,1,0,0,0,114,
		117,1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,17,1,0,0,0,117,115,1,0,
		0,0,118,133,3,20,10,0,119,133,3,24,12,0,120,133,3,22,11,0,121,133,3,46,
		23,0,122,133,3,48,24,0,123,133,3,50,25,0,124,133,3,36,18,0,125,133,3,26,
		13,0,126,133,3,28,14,0,127,133,3,30,15,0,128,133,3,34,17,0,129,133,3,40,
		20,0,130,133,3,44,22,0,131,133,3,38,19,0,132,118,1,0,0,0,132,119,1,0,0,
		0,132,120,1,0,0,0,132,121,1,0,0,0,132,122,1,0,0,0,132,123,1,0,0,0,132,
		124,1,0,0,0,132,125,1,0,0,0,132,126,1,0,0,0,132,127,1,0,0,0,132,128,1,
		0,0,0,132,129,1,0,0,0,132,130,1,0,0,0,132,131,1,0,0,0,133,19,1,0,0,0,134,
		136,5,8,0,0,135,137,5,16,0,0,136,135,1,0,0,0,136,137,1,0,0,0,137,138,1,
		0,0,0,138,139,5,36,0,0,139,148,5,24,0,0,140,145,3,74,37,0,141,142,5,25,
		0,0,142,144,3,74,37,0,143,141,1,0,0,0,144,147,1,0,0,0,145,143,1,0,0,0,
		145,146,1,0,0,0,146,149,1,0,0,0,147,145,1,0,0,0,148,140,1,0,0,0,148,149,
		1,0,0,0,149,150,1,0,0,0,150,151,5,26,0,0,151,21,1,0,0,0,152,153,5,10,0,
		0,153,23,1,0,0,0,154,155,5,21,0,0,155,156,5,27,0,0,156,157,3,74,37,0,157,
		25,1,0,0,0,158,159,5,13,0,0,159,161,5,27,0,0,160,162,5,16,0,0,161,160,
		1,0,0,0,161,162,1,0,0,0,162,163,1,0,0,0,163,164,5,36,0,0,164,27,1,0,0,
		0,165,166,5,14,0,0,166,167,5,36,0,0,167,29,1,0,0,0,168,170,5,15,0,0,169,
		171,5,16,0,0,170,169,1,0,0,0,170,171,1,0,0,0,171,172,1,0,0,0,172,173,5,
		36,0,0,173,182,5,24,0,0,174,179,5,36,0,0,175,176,5,25,0,0,176,178,5,36,
		0,0,177,175,1,0,0,0,178,181,1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,0,180,
		183,1,0,0,0,181,179,1,0,0,0,182,174,1,0,0,0,182,183,1,0,0,0,183,185,1,
		0,0,0,184,186,5,26,0,0,185,184,1,0,0,0,185,186,1,0,0,0,186,188,1,0,0,0,
		187,189,3,32,16,0,188,187,1,0,0,0,188,189,1,0,0,0,189,31,1,0,0,0,190,191,
		5,30,0,0,191,192,3,80,40,0,192,33,1,0,0,0,193,194,5,19,0,0,194,195,5,27,
		0,0,195,196,5,36,0,0,196,35,1,0,0,0,197,198,5,17,0,0,198,199,5,36,0,0,
		199,200,5,35,0,0,200,201,3,74,37,0,201,37,1,0,0,0,202,203,5,9,0,0,203,
		207,3,42,21,0,204,206,3,76,38,0,205,204,1,0,0,0,206,209,1,0,0,0,207,205,
		1,0,0,0,207,208,1,0,0,0,208,39,1,0,0,0,209,207,1,0,0,0,210,211,5,20,0,
		0,211,212,5,27,0,0,212,213,3,74,37,0,213,41,1,0,0,0,214,219,3,76,38,0,
		215,216,5,29,0,0,216,218,3,76,38,0,217,215,1,0,0,0,218,221,1,0,0,0,219,
		217,1,0,0,0,219,220,1,0,0,0,220,43,1,0,0,0,221,219,1,0,0,0,222,223,5,18,
		0,0,223,224,5,36,0,0,224,45,1,0,0,0,225,226,5,11,0,0,226,227,3,52,26,0,
		227,47,1,0,0,0,228,229,5,12,0,0,229,230,5,11,0,0,230,231,3,52,26,0,231,
		49,1,0,0,0,232,233,5,12,0,0,233,51,1,0,0,0,234,243,3,58,29,0,235,243,3,
		54,27,0,236,243,3,56,28,0,237,243,3,60,30,0,238,243,3,62,31,0,239,243,
		3,64,32,0,240,243,3,66,33,0,241,243,3,68,34,0,242,234,1,0,0,0,242,235,
		1,0,0,0,242,236,1,0,0,0,242,237,1,0,0,0,242,238,1,0,0,0,242,239,1,0,0,
		0,242,240,1,0,0,0,242,241,1,0,0,0,243,53,1,0,0,0,244,245,5,36,0,0,245,
		55,1,0,0,0,246,247,5,28,0,0,247,248,5,36,0,0,248,57,1,0,0,0,249,250,3,
		74,37,0,250,251,5,34,0,0,251,252,3,74,37,0,252,59,1,0,0,0,253,254,3,70,
		35,0,254,255,5,34,0,0,255,256,3,70,35,0,256,61,1,0,0,0,257,258,3,70,35,
		0,258,259,5,31,0,0,259,260,3,70,35,0,260,63,1,0,0,0,261,262,3,70,35,0,
		262,263,5,33,0,0,263,264,3,70,35,0,264,65,1,0,0,0,265,266,3,70,35,0,266,
		267,5,30,0,0,267,268,3,70,35,0,268,67,1,0,0,0,269,270,3,70,35,0,270,271,
		5,32,0,0,271,272,3,70,35,0,272,69,1,0,0,0,273,274,7,0,0,0,274,71,1,0,0,
		0,275,276,3,74,37,0,276,73,1,0,0,0,277,280,3,80,40,0,278,280,3,78,39,0,
		279,277,1,0,0,0,279,278,1,0,0,0,280,75,1,0,0,0,281,285,5,36,0,0,282,285,
		3,80,40,0,283,285,3,78,39,0,284,281,1,0,0,0,284,282,1,0,0,0,284,283,1,
		0,0,0,285,77,1,0,0,0,286,287,5,23,0,0,287,79,1,0,0,0,288,289,5,22,0,0,
		289,81,1,0,0,0,18,85,97,115,132,136,145,148,161,170,179,182,185,188,207,
		219,242,279,284
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Eir.MFSH.Parser
