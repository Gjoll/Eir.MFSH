//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MFSHParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Eir.MFSH.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class MFSHParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		MFSH=1, TEXTA=2, TEXTB=3, TEXTC=4, TEXTD=5, TICKTEXT=6, CR=7, APPLY=8, 
		END=9, INCOMPATIBLE=10, MACRO=11, ONCE=12, SINGLE=13, USE=14, STRING=15, 
		MULTILINE_STRING=16, OPAR=17, COMMA=18, CPAR=19, GT=20, NAME=21, MFSHCont=22, 
		MFSHExit=23, MFSHCR=24, MFSH_SPACE=25;
	public const int
		RULE_document = 0, RULE_command = 1, RULE_textA = 2, RULE_textB = 3, RULE_textC = 4, 
		RULE_textD = 5, RULE_tickText = 6, RULE_mfshExit = 7, RULE_mfshCmds = 8, 
		RULE_mfshCmd = 9, RULE_apply = 10, RULE_end = 11, RULE_incompatible = 12, 
		RULE_macro = 13, RULE_redirect = 14, RULE_use = 15, RULE_anyString = 16, 
		RULE_multiLineString = 17, RULE_singleString = 18;
	public static readonly string[] ruleNames = {
		"document", "command", "textA", "textB", "textC", "textD", "tickText", 
		"mfshExit", "mfshCmds", "mfshCmd", "apply", "end", "incompatible", "macro", 
		"redirect", "use", "anyString", "multiLineString", "singleString"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'apply'", "'end'", "'incompatible'", 
		"'macro'", "'once'", "'single'", "'use'", null, null, "'('", "','", "')'", 
		"'>'", null, null, "'\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "MFSH", "TEXTA", "TEXTB", "TEXTC", "TEXTD", "TICKTEXT", "CR", "APPLY", 
		"END", "INCOMPATIBLE", "MACRO", "ONCE", "SINGLE", "USE", "STRING", "MULTILINE_STRING", 
		"OPAR", "COMMA", "CPAR", "GT", "NAME", "MFSHCont", "MFSHExit", "MFSHCR", 
		"MFSH_SPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MFSHParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MFSHParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MFSHParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MFSHParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocumentContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(MFSHParser.Eof, 0); }
		public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MFSH) | (1L << TEXTA) | (1L << TEXTB) | (1L << TEXTC) | (1L << TEXTD) | (1L << TICKTEXT) | (1L << MFSHExit))) != 0)) {
				{
				{
				State = 38; command();
				}
				}
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 44; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		public TextAContext textA() {
			return GetRuleContext<TextAContext>(0);
		}
		public TextBContext textB() {
			return GetRuleContext<TextBContext>(0);
		}
		public TextCContext textC() {
			return GetRuleContext<TextCContext>(0);
		}
		public TextDContext textD() {
			return GetRuleContext<TextDContext>(0);
		}
		public TickTextContext tickText() {
			return GetRuleContext<TickTextContext>(0);
		}
		public MfshExitContext mfshExit() {
			return GetRuleContext<MfshExitContext>(0);
		}
		public MfshCmdsContext mfshCmds() {
			return GetRuleContext<MfshCmdsContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 2, RULE_command);
		try {
			State = 53;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TEXTA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 46; textA();
				}
				break;
			case TEXTB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 47; textB();
				}
				break;
			case TEXTC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 48; textC();
				}
				break;
			case TEXTD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 49; textD();
				}
				break;
			case TICKTEXT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 50; tickText();
				}
				break;
			case MFSHExit:
				EnterOuterAlt(_localctx, 6);
				{
				State = 51; mfshExit();
				}
				break;
			case MFSH:
				EnterOuterAlt(_localctx, 7);
				{
				State = 52; mfshCmds();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextAContext : ParserRuleContext {
		public ITerminalNode TEXTA() { return GetToken(MFSHParser.TEXTA, 0); }
		public TextAContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textA; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextA(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextAContext textA() {
		TextAContext _localctx = new TextAContext(Context, State);
		EnterRule(_localctx, 4, RULE_textA);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; Match(TEXTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextBContext : ParserRuleContext {
		public ITerminalNode TEXTB() { return GetToken(MFSHParser.TEXTB, 0); }
		public TextBContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textB; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextB(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextBContext textB() {
		TextBContext _localctx = new TextBContext(Context, State);
		EnterRule(_localctx, 6, RULE_textB);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57; Match(TEXTB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextCContext : ParserRuleContext {
		public ITerminalNode TEXTC() { return GetToken(MFSHParser.TEXTC, 0); }
		public TextCContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textC; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextC(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextCContext textC() {
		TextCContext _localctx = new TextCContext(Context, State);
		EnterRule(_localctx, 8, RULE_textC);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59; Match(TEXTC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextDContext : ParserRuleContext {
		public ITerminalNode TEXTD() { return GetToken(MFSHParser.TEXTD, 0); }
		public TextDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textD; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextD(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextDContext textD() {
		TextDContext _localctx = new TextDContext(Context, State);
		EnterRule(_localctx, 10, RULE_textD);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; Match(TEXTD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TickTextContext : ParserRuleContext {
		public ITerminalNode TICKTEXT() { return GetToken(MFSHParser.TICKTEXT, 0); }
		public TickTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tickText; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTickText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TickTextContext tickText() {
		TickTextContext _localctx = new TickTextContext(Context, State);
		EnterRule(_localctx, 12, RULE_tickText);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63; Match(TICKTEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MfshExitContext : ParserRuleContext {
		public ITerminalNode MFSHExit() { return GetToken(MFSHParser.MFSHExit, 0); }
		public MfshExitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mfshExit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMfshExit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MfshExitContext mfshExit() {
		MfshExitContext _localctx = new MfshExitContext(Context, State);
		EnterRule(_localctx, 14, RULE_mfshExit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65; Match(MFSHExit);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MfshCmdsContext : ParserRuleContext {
		public ITerminalNode MFSH() { return GetToken(MFSHParser.MFSH, 0); }
		public MfshCmdContext[] mfshCmd() {
			return GetRuleContexts<MfshCmdContext>();
		}
		public MfshCmdContext mfshCmd(int i) {
			return GetRuleContext<MfshCmdContext>(i);
		}
		public MfshCmdsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mfshCmds; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMfshCmds(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MfshCmdsContext mfshCmds() {
		MfshCmdsContext _localctx = new MfshCmdsContext(Context, State);
		EnterRule(_localctx, 16, RULE_mfshCmds);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; Match(MFSH);
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << APPLY) | (1L << END) | (1L << INCOMPATIBLE) | (1L << MACRO) | (1L << USE))) != 0)) {
				{
				{
				State = 68; mfshCmd();
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MfshCmdContext : ParserRuleContext {
		public ApplyContext apply() {
			return GetRuleContext<ApplyContext>(0);
		}
		public EndContext end() {
			return GetRuleContext<EndContext>(0);
		}
		public IncompatibleContext incompatible() {
			return GetRuleContext<IncompatibleContext>(0);
		}
		public MacroContext macro() {
			return GetRuleContext<MacroContext>(0);
		}
		public UseContext use() {
			return GetRuleContext<UseContext>(0);
		}
		public MfshCmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mfshCmd; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMfshCmd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MfshCmdContext mfshCmd() {
		MfshCmdContext _localctx = new MfshCmdContext(Context, State);
		EnterRule(_localctx, 18, RULE_mfshCmd);
		try {
			State = 79;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case APPLY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 74; apply();
				}
				break;
			case END:
				EnterOuterAlt(_localctx, 2);
				{
				State = 75; end();
				}
				break;
			case INCOMPATIBLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 76; incompatible();
				}
				break;
			case MACRO:
				EnterOuterAlt(_localctx, 4);
				{
				State = 77; macro();
				}
				break;
			case USE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 78; use();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ApplyContext : ParserRuleContext {
		public ITerminalNode APPLY() { return GetToken(MFSHParser.APPLY, 0); }
		public ITerminalNode NAME() { return GetToken(MFSHParser.NAME, 0); }
		public ITerminalNode OPAR() { return GetToken(MFSHParser.OPAR, 0); }
		public ITerminalNode CPAR() { return GetToken(MFSHParser.CPAR, 0); }
		public AnyStringContext[] anyString() {
			return GetRuleContexts<AnyStringContext>();
		}
		public AnyStringContext anyString(int i) {
			return GetRuleContext<AnyStringContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MFSHParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MFSHParser.COMMA, i);
		}
		public ApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_apply; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitApply(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ApplyContext apply() {
		ApplyContext _localctx = new ApplyContext(Context, State);
		EnterRule(_localctx, 20, RULE_apply);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(APPLY);
			State = 82; Match(NAME);
			State = 83; Match(OPAR);
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING || _la==MULTILINE_STRING) {
				{
				State = 84; anyString();
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 85; Match(COMMA);
					State = 86; anyString();
					}
					}
					State = 91;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 94; Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndContext : ParserRuleContext {
		public ITerminalNode END() { return GetToken(MFSHParser.END, 0); }
		public EndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndContext end() {
		EndContext _localctx = new EndContext(Context, State);
		EnterRule(_localctx, 22, RULE_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncompatibleContext : ParserRuleContext {
		public ITerminalNode INCOMPATIBLE() { return GetToken(MFSHParser.INCOMPATIBLE, 0); }
		public ITerminalNode NAME() { return GetToken(MFSHParser.NAME, 0); }
		public IncompatibleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incompatible; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncompatible(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncompatibleContext incompatible() {
		IncompatibleContext _localctx = new IncompatibleContext(Context, State);
		EnterRule(_localctx, 24, RULE_incompatible);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; Match(INCOMPATIBLE);
			State = 99; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroContext : ParserRuleContext {
		public ITerminalNode MACRO() { return GetToken(MFSHParser.MACRO, 0); }
		public ITerminalNode[] NAME() { return GetTokens(MFSHParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(MFSHParser.NAME, i);
		}
		public ITerminalNode OPAR() { return GetToken(MFSHParser.OPAR, 0); }
		public ITerminalNode CPAR() { return GetToken(MFSHParser.CPAR, 0); }
		public ITerminalNode SINGLE() { return GetToken(MFSHParser.SINGLE, 0); }
		public ITerminalNode ONCE() { return GetToken(MFSHParser.ONCE, 0); }
		public RedirectContext redirect() {
			return GetRuleContext<RedirectContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MFSHParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MFSHParser.COMMA, i);
		}
		public MacroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacro(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroContext macro() {
		MacroContext _localctx = new MacroContext(Context, State);
		EnterRule(_localctx, 26, RULE_macro);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; Match(MACRO);
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SINGLE) {
				{
				State = 102; Match(SINGLE);
				}
			}

			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ONCE) {
				{
				State = 105; Match(ONCE);
				}
			}

			State = 108; Match(NAME);
			State = 109; Match(OPAR);
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 110; Match(NAME);
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 111; Match(COMMA);
					State = 112; Match(NAME);
					}
					}
					State = 117;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 120; Match(CPAR);
			State = 122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GT) {
				{
				State = 121; redirect();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedirectContext : ParserRuleContext {
		public ITerminalNode GT() { return GetToken(MFSHParser.GT, 0); }
		public SingleStringContext singleString() {
			return GetRuleContext<SingleStringContext>(0);
		}
		public RedirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redirect; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedirect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedirectContext redirect() {
		RedirectContext _localctx = new RedirectContext(Context, State);
		EnterRule(_localctx, 28, RULE_redirect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; Match(GT);
			State = 125; singleString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseContext : ParserRuleContext {
		public ITerminalNode USE() { return GetToken(MFSHParser.USE, 0); }
		public ITerminalNode NAME() { return GetToken(MFSHParser.NAME, 0); }
		public UseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_use; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseContext use() {
		UseContext _localctx = new UseContext(Context, State);
		EnterRule(_localctx, 30, RULE_use);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; Match(USE);
			State = 128; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnyStringContext : ParserRuleContext {
		public SingleStringContext singleString() {
			return GetRuleContext<SingleStringContext>(0);
		}
		public MultiLineStringContext multiLineString() {
			return GetRuleContext<MultiLineStringContext>(0);
		}
		public AnyStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anyString; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnyString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnyStringContext anyString() {
		AnyStringContext _localctx = new AnyStringContext(Context, State);
		EnterRule(_localctx, 32, RULE_anyString);
		try {
			State = 132;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 130; singleString();
				}
				break;
			case MULTILINE_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 131; multiLineString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiLineStringContext : ParserRuleContext {
		public ITerminalNode MULTILINE_STRING() { return GetToken(MFSHParser.MULTILINE_STRING, 0); }
		public MultiLineStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiLineString; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiLineString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiLineStringContext multiLineString() {
		MultiLineStringContext _localctx = new MultiLineStringContext(Context, State);
		EnterRule(_localctx, 34, RULE_multiLineString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134; Match(MULTILINE_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleStringContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(MFSHParser.STRING, 0); }
		public SingleStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleString; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleStringContext singleString() {
		SingleStringContext _localctx = new SingleStringContext(Context, State);
		EnterRule(_localctx, 36, RULE_singleString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1B', '\x8D', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x3', '\x2', '\a', '\x2', '*', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '-', '\v', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x38', '\n', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\a', '\n', 'H', '\n', '\n', 
		'\f', '\n', '\xE', '\n', 'K', '\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 'R', '\n', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', 
		'\f', 'Z', '\n', '\f', '\f', '\f', '\xE', '\f', ']', '\v', '\f', '\x5', 
		'\f', '_', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x5', '\xF', 'j', '\n', '\xF', '\x3', '\xF', '\x5', '\xF', 'm', '\n', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\a', '\xF', 't', '\n', '\xF', '\f', '\xF', '\xE', '\xF', 'w', 
		'\v', '\xF', '\x5', '\xF', 'y', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x5', '\xF', '}', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x5', '\x12', '\x87', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x2', '\x2', '\x15', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '\x2', '\x2', '\x2', '\x8D', 
		'\x2', '+', '\x3', '\x2', '\x2', '\x2', '\x4', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x39', '\x3', '\x2', '\x2', '\x2', '\b', ';', '\x3', '\x2', 
		'\x2', '\x2', '\n', '=', '\x3', '\x2', '\x2', '\x2', '\f', '?', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x41', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x12', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x14', 'Q', '\x3', '\x2', '\x2', '\x2', '\x16', 'S', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x62', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x64', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', 'g', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'~', '\x3', '\x2', '\x2', '\x2', ' ', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\"', '\x86', '\x3', '\x2', '\x2', '\x2', '$', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '&', '\x8A', '\x3', '\x2', '\x2', '\x2', '(', '*', '\x5', '\x4', 
		'\x3', '\x2', ')', '(', '\x3', '\x2', '\x2', '\x2', '*', '-', '\x3', '\x2', 
		'\x2', '\x2', '+', ')', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', 
		'\x2', '\x2', ',', '.', '\x3', '\x2', '\x2', '\x2', '-', '+', '\x3', '\x2', 
		'\x2', '\x2', '.', '/', '\a', '\x2', '\x2', '\x3', '/', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x38', '\x5', '\x6', '\x4', '\x2', '\x31', 
		'\x38', '\x5', '\b', '\x5', '\x2', '\x32', '\x38', '\x5', '\n', '\x6', 
		'\x2', '\x33', '\x38', '\x5', '\f', '\a', '\x2', '\x34', '\x38', '\x5', 
		'\xE', '\b', '\x2', '\x35', '\x38', '\x5', '\x10', '\t', '\x2', '\x36', 
		'\x38', '\x5', '\x12', '\n', '\x2', '\x37', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x31', '\x3', '\x2', '\x2', '\x2', '\x37', '\x32', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x33', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\x37', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x36', '\x3', '\x2', '\x2', '\x2', '\x38', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x39', ':', '\a', '\x4', '\x2', '\x2', ':', '\a', 
		'\x3', '\x2', '\x2', '\x2', ';', '<', '\a', '\x5', '\x2', '\x2', '<', 
		'\t', '\x3', '\x2', '\x2', '\x2', '=', '>', '\a', '\x6', '\x2', '\x2', 
		'>', '\v', '\x3', '\x2', '\x2', '\x2', '?', '@', '\a', '\a', '\x2', '\x2', 
		'@', '\r', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\a', '\b', '\x2', 
		'\x2', '\x42', '\xF', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\a', 
		'\x19', '\x2', '\x2', '\x44', '\x11', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'I', '\a', '\x3', '\x2', '\x2', '\x46', 'H', '\x5', '\x14', '\v', '\x2', 
		'G', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', 'K', '\x3', '\x2', '\x2', 
		'\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x3', '\x2', '\x2', 
		'\x2', 'J', '\x13', '\x3', '\x2', '\x2', '\x2', 'K', 'I', '\x3', '\x2', 
		'\x2', '\x2', 'L', 'R', '\x5', '\x16', '\f', '\x2', 'M', 'R', '\x5', '\x18', 
		'\r', '\x2', 'N', 'R', '\x5', '\x1A', '\xE', '\x2', 'O', 'R', '\x5', '\x1C', 
		'\xF', '\x2', 'P', 'R', '\x5', ' ', '\x11', '\x2', 'Q', 'L', '\x3', '\x2', 
		'\x2', '\x2', 'Q', 'M', '\x3', '\x2', '\x2', '\x2', 'Q', 'N', '\x3', '\x2', 
		'\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', 'P', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x15', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\a', 
		'\n', '\x2', '\x2', 'T', 'U', '\a', '\x17', '\x2', '\x2', 'U', '^', '\a', 
		'\x13', '\x2', '\x2', 'V', '[', '\x5', '\"', '\x12', '\x2', 'W', 'X', 
		'\a', '\x14', '\x2', '\x2', 'X', 'Z', '\x5', '\"', '\x12', '\x2', 'Y', 
		'W', '\x3', '\x2', '\x2', '\x2', 'Z', ']', '\x3', '\x2', '\x2', '\x2', 
		'[', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\x3', '\x2', '\x2', 
		'\x2', '\\', '_', '\x3', '\x2', '\x2', '\x2', ']', '[', '\x3', '\x2', 
		'\x2', '\x2', '^', 'V', '\x3', '\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', 
		'\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\a', 
		'\x15', '\x2', '\x2', '\x61', '\x17', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'\x63', '\a', '\v', '\x2', '\x2', '\x63', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x64', '\x65', '\a', '\f', '\x2', '\x2', '\x65', '\x66', '\a', 
		'\x17', '\x2', '\x2', '\x66', '\x1B', '\x3', '\x2', '\x2', '\x2', 'g', 
		'i', '\a', '\r', '\x2', '\x2', 'h', 'j', '\a', '\xF', '\x2', '\x2', 'i', 
		'h', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x3', '\x2', '\x2', '\x2', 
		'j', 'l', '\x3', '\x2', '\x2', '\x2', 'k', 'm', '\a', '\xE', '\x2', '\x2', 
		'l', 'k', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', '\x2', 
		'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\a', '\x17', '\x2', '\x2', 
		'o', 'x', '\a', '\x13', '\x2', '\x2', 'p', 'u', '\a', '\x17', '\x2', '\x2', 
		'q', 'r', '\a', '\x14', '\x2', '\x2', 'r', 't', '\a', '\x17', '\x2', '\x2', 
		's', 'q', '\x3', '\x2', '\x2', '\x2', 't', 'w', '\x3', '\x2', '\x2', '\x2', 
		'u', 's', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 
		'v', 'y', '\x3', '\x2', '\x2', '\x2', 'w', 'u', '\x3', '\x2', '\x2', '\x2', 
		'x', 'p', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', '\x2', '\x2', '\x2', 
		'y', 'z', '\x3', '\x2', '\x2', '\x2', 'z', '|', '\a', '\x15', '\x2', '\x2', 
		'{', '}', '\x5', '\x1E', '\x10', '\x2', '|', '{', '\x3', '\x2', '\x2', 
		'\x2', '|', '}', '\x3', '\x2', '\x2', '\x2', '}', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x7F', '\a', '\x16', '\x2', '\x2', '\x7F', '\x80', 
		'\x5', '&', '\x14', '\x2', '\x80', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x81', '\x82', '\a', '\x10', '\x2', '\x2', '\x82', '\x83', '\a', '\x17', 
		'\x2', '\x2', '\x83', '!', '\x3', '\x2', '\x2', '\x2', '\x84', '\x87', 
		'\x5', '&', '\x14', '\x2', '\x85', '\x87', '\x5', '$', '\x13', '\x2', 
		'\x86', '\x84', '\x3', '\x2', '\x2', '\x2', '\x86', '\x85', '\x3', '\x2', 
		'\x2', '\x2', '\x87', '#', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', 
		'\a', '\x12', '\x2', '\x2', '\x89', '%', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x8B', '\a', '\x11', '\x2', '\x2', '\x8B', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '+', '\x37', 'I', 'Q', '[', '^', 'i', 'l', 'u', 'x', '|', 
		'\x86',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Eir.MFSH.Parser
