//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MFSHParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Eir.MFSH.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class MFSHParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		MFSH=1, TEXTA=2, TEXTB=3, TEXTC=4, TEXTD=5, TICKTEXT=6, CR=7, APPLY=8, 
		END=9, IF=10, ELSE=11, INCOMPATIBLE=12, MACRO=13, ONCE=14, SINGLE=15, 
		USE=16, STRING=17, MULTILINE_STRING=18, OPAR=19, COMMA=20, CPAR=21, GT=22, 
		LT=23, GE=24, LE=25, EQ=26, NAME=27, NUMBER=28, MFSHCont=29, MFSHExit=30, 
		MFSHCR=31, MFSH_SPACE=32;
	public const int
		RULE_document = 0, RULE_command = 1, RULE_textA = 2, RULE_textB = 3, RULE_textC = 4, 
		RULE_textD = 5, RULE_tickText = 6, RULE_mfshExit = 7, RULE_mfshCmds = 8, 
		RULE_mfshCmd = 9, RULE_apply = 10, RULE_end = 11, RULE_incompatible = 12, 
		RULE_macro = 13, RULE_redirect = 14, RULE_use = 15, RULE_if = 16, RULE_elseIf = 17, 
		RULE_else = 18, RULE_condition = 19, RULE_conditionStrEq = 20, RULE_conditionNumEq = 21, 
		RULE_conditionNumLt = 22, RULE_conditionNumLe = 23, RULE_conditionNumGt = 24, 
		RULE_conditionNumGe = 25, RULE_conditionValueNum = 26, RULE_conditionValueStr = 27, 
		RULE_anyString = 28, RULE_multiLineString = 29, RULE_singleString = 30;
	public static readonly string[] ruleNames = {
		"document", "command", "textA", "textB", "textC", "textD", "tickText", 
		"mfshExit", "mfshCmds", "mfshCmd", "apply", "end", "incompatible", "macro", 
		"redirect", "use", "if", "elseIf", "else", "condition", "conditionStrEq", 
		"conditionNumEq", "conditionNumLt", "conditionNumLe", "conditionNumGt", 
		"conditionNumGe", "conditionValueNum", "conditionValueStr", "anyString", 
		"multiLineString", "singleString"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'apply'", "'end'", "'if'", 
		"'else'", "'incompatible'", "'macro'", "'once'", "'single'", "'use'", 
		null, null, "'('", "','", "')'", "'>'", "'<'", "'>='", "'<='", "'=='", 
		null, null, null, "'\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "MFSH", "TEXTA", "TEXTB", "TEXTC", "TEXTD", "TICKTEXT", "CR", "APPLY", 
		"END", "IF", "ELSE", "INCOMPATIBLE", "MACRO", "ONCE", "SINGLE", "USE", 
		"STRING", "MULTILINE_STRING", "OPAR", "COMMA", "CPAR", "GT", "LT", "GE", 
		"LE", "EQ", "NAME", "NUMBER", "MFSHCont", "MFSHExit", "MFSHCR", "MFSH_SPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MFSHParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MFSHParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MFSHParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MFSHParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocumentContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(MFSHParser.Eof, 0); }
		public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MFSH) | (1L << TEXTA) | (1L << TEXTB) | (1L << TEXTC) | (1L << TEXTD) | (1L << TICKTEXT) | (1L << MFSHExit))) != 0)) {
				{
				{
				State = 62; command();
				}
				}
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 68; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		public TextAContext textA() {
			return GetRuleContext<TextAContext>(0);
		}
		public TextBContext textB() {
			return GetRuleContext<TextBContext>(0);
		}
		public TextCContext textC() {
			return GetRuleContext<TextCContext>(0);
		}
		public TextDContext textD() {
			return GetRuleContext<TextDContext>(0);
		}
		public TickTextContext tickText() {
			return GetRuleContext<TickTextContext>(0);
		}
		public MfshExitContext mfshExit() {
			return GetRuleContext<MfshExitContext>(0);
		}
		public MfshCmdsContext mfshCmds() {
			return GetRuleContext<MfshCmdsContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 2, RULE_command);
		try {
			State = 77;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TEXTA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 70; textA();
				}
				break;
			case TEXTB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 71; textB();
				}
				break;
			case TEXTC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 72; textC();
				}
				break;
			case TEXTD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 73; textD();
				}
				break;
			case TICKTEXT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 74; tickText();
				}
				break;
			case MFSHExit:
				EnterOuterAlt(_localctx, 6);
				{
				State = 75; mfshExit();
				}
				break;
			case MFSH:
				EnterOuterAlt(_localctx, 7);
				{
				State = 76; mfshCmds();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextAContext : ParserRuleContext {
		public ITerminalNode TEXTA() { return GetToken(MFSHParser.TEXTA, 0); }
		public TextAContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textA; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextA(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextAContext textA() {
		TextAContext _localctx = new TextAContext(Context, State);
		EnterRule(_localctx, 4, RULE_textA);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; Match(TEXTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextBContext : ParserRuleContext {
		public ITerminalNode TEXTB() { return GetToken(MFSHParser.TEXTB, 0); }
		public TextBContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textB; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextB(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextBContext textB() {
		TextBContext _localctx = new TextBContext(Context, State);
		EnterRule(_localctx, 6, RULE_textB);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(TEXTB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextCContext : ParserRuleContext {
		public ITerminalNode TEXTC() { return GetToken(MFSHParser.TEXTC, 0); }
		public TextCContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textC; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextC(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextCContext textC() {
		TextCContext _localctx = new TextCContext(Context, State);
		EnterRule(_localctx, 8, RULE_textC);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83; Match(TEXTC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextDContext : ParserRuleContext {
		public ITerminalNode TEXTD() { return GetToken(MFSHParser.TEXTD, 0); }
		public TextDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textD; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextD(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextDContext textD() {
		TextDContext _localctx = new TextDContext(Context, State);
		EnterRule(_localctx, 10, RULE_textD);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; Match(TEXTD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TickTextContext : ParserRuleContext {
		public ITerminalNode TICKTEXT() { return GetToken(MFSHParser.TICKTEXT, 0); }
		public TickTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tickText; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTickText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TickTextContext tickText() {
		TickTextContext _localctx = new TickTextContext(Context, State);
		EnterRule(_localctx, 12, RULE_tickText);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87; Match(TICKTEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MfshExitContext : ParserRuleContext {
		public ITerminalNode MFSHExit() { return GetToken(MFSHParser.MFSHExit, 0); }
		public MfshExitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mfshExit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMfshExit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MfshExitContext mfshExit() {
		MfshExitContext _localctx = new MfshExitContext(Context, State);
		EnterRule(_localctx, 14, RULE_mfshExit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; Match(MFSHExit);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MfshCmdsContext : ParserRuleContext {
		public ITerminalNode MFSH() { return GetToken(MFSHParser.MFSH, 0); }
		public MfshCmdContext[] mfshCmd() {
			return GetRuleContexts<MfshCmdContext>();
		}
		public MfshCmdContext mfshCmd(int i) {
			return GetRuleContext<MfshCmdContext>(i);
		}
		public MfshCmdsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mfshCmds; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMfshCmds(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MfshCmdsContext mfshCmds() {
		MfshCmdsContext _localctx = new MfshCmdsContext(Context, State);
		EnterRule(_localctx, 16, RULE_mfshCmds);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; Match(MFSH);
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << APPLY) | (1L << END) | (1L << IF) | (1L << ELSE) | (1L << INCOMPATIBLE) | (1L << MACRO) | (1L << USE))) != 0)) {
				{
				{
				State = 92; mfshCmd();
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MfshCmdContext : ParserRuleContext {
		public ApplyContext apply() {
			return GetRuleContext<ApplyContext>(0);
		}
		public EndContext end() {
			return GetRuleContext<EndContext>(0);
		}
		public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		public ElseIfContext elseIf() {
			return GetRuleContext<ElseIfContext>(0);
		}
		public ElseContext @else() {
			return GetRuleContext<ElseContext>(0);
		}
		public IncompatibleContext incompatible() {
			return GetRuleContext<IncompatibleContext>(0);
		}
		public MacroContext macro() {
			return GetRuleContext<MacroContext>(0);
		}
		public UseContext use() {
			return GetRuleContext<UseContext>(0);
		}
		public MfshCmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mfshCmd; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMfshCmd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MfshCmdContext mfshCmd() {
		MfshCmdContext _localctx = new MfshCmdContext(Context, State);
		EnterRule(_localctx, 18, RULE_mfshCmd);
		try {
			State = 106;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 98; apply();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 99; end();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 100; @if();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 101; elseIf();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 102; @else();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 103; incompatible();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 104; macro();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 105; use();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ApplyContext : ParserRuleContext {
		public ITerminalNode APPLY() { return GetToken(MFSHParser.APPLY, 0); }
		public ITerminalNode NAME() { return GetToken(MFSHParser.NAME, 0); }
		public ITerminalNode OPAR() { return GetToken(MFSHParser.OPAR, 0); }
		public ITerminalNode CPAR() { return GetToken(MFSHParser.CPAR, 0); }
		public AnyStringContext[] anyString() {
			return GetRuleContexts<AnyStringContext>();
		}
		public AnyStringContext anyString(int i) {
			return GetRuleContext<AnyStringContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MFSHParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MFSHParser.COMMA, i);
		}
		public ApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_apply; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitApply(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ApplyContext apply() {
		ApplyContext _localctx = new ApplyContext(Context, State);
		EnterRule(_localctx, 20, RULE_apply);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(APPLY);
			State = 109; Match(NAME);
			State = 110; Match(OPAR);
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING || _la==MULTILINE_STRING) {
				{
				State = 111; anyString();
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 112; Match(COMMA);
					State = 113; anyString();
					}
					}
					State = 118;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 121; Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndContext : ParserRuleContext {
		public ITerminalNode END() { return GetToken(MFSHParser.END, 0); }
		public EndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndContext end() {
		EndContext _localctx = new EndContext(Context, State);
		EnterRule(_localctx, 22, RULE_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncompatibleContext : ParserRuleContext {
		public ITerminalNode INCOMPATIBLE() { return GetToken(MFSHParser.INCOMPATIBLE, 0); }
		public ITerminalNode NAME() { return GetToken(MFSHParser.NAME, 0); }
		public IncompatibleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incompatible; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncompatible(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncompatibleContext incompatible() {
		IncompatibleContext _localctx = new IncompatibleContext(Context, State);
		EnterRule(_localctx, 24, RULE_incompatible);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125; Match(INCOMPATIBLE);
			State = 126; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroContext : ParserRuleContext {
		public ITerminalNode MACRO() { return GetToken(MFSHParser.MACRO, 0); }
		public ITerminalNode[] NAME() { return GetTokens(MFSHParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(MFSHParser.NAME, i);
		}
		public ITerminalNode OPAR() { return GetToken(MFSHParser.OPAR, 0); }
		public ITerminalNode CPAR() { return GetToken(MFSHParser.CPAR, 0); }
		public ITerminalNode SINGLE() { return GetToken(MFSHParser.SINGLE, 0); }
		public ITerminalNode ONCE() { return GetToken(MFSHParser.ONCE, 0); }
		public RedirectContext redirect() {
			return GetRuleContext<RedirectContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MFSHParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MFSHParser.COMMA, i);
		}
		public MacroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacro(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroContext macro() {
		MacroContext _localctx = new MacroContext(Context, State);
		EnterRule(_localctx, 26, RULE_macro);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128; Match(MACRO);
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SINGLE) {
				{
				State = 129; Match(SINGLE);
				}
			}

			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ONCE) {
				{
				State = 132; Match(ONCE);
				}
			}

			State = 135; Match(NAME);
			State = 136; Match(OPAR);
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 137; Match(NAME);
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 138; Match(COMMA);
					State = 139; Match(NAME);
					}
					}
					State = 144;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 147; Match(CPAR);
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GT) {
				{
				State = 148; redirect();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedirectContext : ParserRuleContext {
		public ITerminalNode GT() { return GetToken(MFSHParser.GT, 0); }
		public SingleStringContext singleString() {
			return GetRuleContext<SingleStringContext>(0);
		}
		public RedirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redirect; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedirect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedirectContext redirect() {
		RedirectContext _localctx = new RedirectContext(Context, State);
		EnterRule(_localctx, 28, RULE_redirect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151; Match(GT);
			State = 152; singleString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseContext : ParserRuleContext {
		public ITerminalNode USE() { return GetToken(MFSHParser.USE, 0); }
		public ITerminalNode NAME() { return GetToken(MFSHParser.NAME, 0); }
		public UseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_use; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseContext use() {
		UseContext _localctx = new UseContext(Context, State);
		EnterRule(_localctx, 30, RULE_use);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154; Match(USE);
			State = 155; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(MFSHParser.IF, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 32, RULE_if);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; Match(IF);
			State = 158; condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(MFSHParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(MFSHParser.IF, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ElseIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIf; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfContext elseIf() {
		ElseIfContext _localctx = new ElseIfContext(Context, State);
		EnterRule(_localctx, 34, RULE_elseIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; Match(ELSE);
			State = 161; Match(IF);
			State = 162; condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(MFSHParser.ELSE, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseContext @else() {
		ElseContext _localctx = new ElseContext(Context, State);
		EnterRule(_localctx, 36, RULE_else);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; Match(ELSE);
			State = 165; condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ConditionStrEqContext conditionStrEq() {
			return GetRuleContext<ConditionStrEqContext>(0);
		}
		public ConditionNumEqContext conditionNumEq() {
			return GetRuleContext<ConditionNumEqContext>(0);
		}
		public ConditionNumLtContext conditionNumLt() {
			return GetRuleContext<ConditionNumLtContext>(0);
		}
		public ConditionNumLeContext conditionNumLe() {
			return GetRuleContext<ConditionNumLeContext>(0);
		}
		public ConditionNumGtContext conditionNumGt() {
			return GetRuleContext<ConditionNumGtContext>(0);
		}
		public ConditionNumGeContext conditionNumGe() {
			return GetRuleContext<ConditionNumGeContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 38, RULE_condition);
		try {
			State = 173;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 167; conditionStrEq();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 168; conditionNumEq();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 169; conditionNumLt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 170; conditionNumLe();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 171; conditionNumGt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 172; conditionNumGe();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionStrEqContext : ParserRuleContext {
		public AnyStringContext[] anyString() {
			return GetRuleContexts<AnyStringContext>();
		}
		public AnyStringContext anyString(int i) {
			return GetRuleContext<AnyStringContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(MFSHParser.EQ, 0); }
		public ConditionStrEqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionStrEq; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionStrEq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionStrEqContext conditionStrEq() {
		ConditionStrEqContext _localctx = new ConditionStrEqContext(Context, State);
		EnterRule(_localctx, 40, RULE_conditionStrEq);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175; anyString();
			State = 176; Match(EQ);
			State = 177; anyString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionNumEqContext : ParserRuleContext {
		public ConditionValueNumContext[] conditionValueNum() {
			return GetRuleContexts<ConditionValueNumContext>();
		}
		public ConditionValueNumContext conditionValueNum(int i) {
			return GetRuleContext<ConditionValueNumContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(MFSHParser.EQ, 0); }
		public ConditionNumEqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionNumEq; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionNumEq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionNumEqContext conditionNumEq() {
		ConditionNumEqContext _localctx = new ConditionNumEqContext(Context, State);
		EnterRule(_localctx, 42, RULE_conditionNumEq);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179; conditionValueNum();
			State = 180; Match(EQ);
			State = 181; conditionValueNum();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionNumLtContext : ParserRuleContext {
		public ConditionValueNumContext[] conditionValueNum() {
			return GetRuleContexts<ConditionValueNumContext>();
		}
		public ConditionValueNumContext conditionValueNum(int i) {
			return GetRuleContext<ConditionValueNumContext>(i);
		}
		public ITerminalNode LT() { return GetToken(MFSHParser.LT, 0); }
		public ConditionNumLtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionNumLt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionNumLt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionNumLtContext conditionNumLt() {
		ConditionNumLtContext _localctx = new ConditionNumLtContext(Context, State);
		EnterRule(_localctx, 44, RULE_conditionNumLt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183; conditionValueNum();
			State = 184; Match(LT);
			State = 185; conditionValueNum();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionNumLeContext : ParserRuleContext {
		public ConditionValueNumContext[] conditionValueNum() {
			return GetRuleContexts<ConditionValueNumContext>();
		}
		public ConditionValueNumContext conditionValueNum(int i) {
			return GetRuleContext<ConditionValueNumContext>(i);
		}
		public ITerminalNode LE() { return GetToken(MFSHParser.LE, 0); }
		public ConditionNumLeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionNumLe; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionNumLe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionNumLeContext conditionNumLe() {
		ConditionNumLeContext _localctx = new ConditionNumLeContext(Context, State);
		EnterRule(_localctx, 46, RULE_conditionNumLe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187; conditionValueNum();
			State = 188; Match(LE);
			State = 189; conditionValueNum();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionNumGtContext : ParserRuleContext {
		public ConditionValueNumContext[] conditionValueNum() {
			return GetRuleContexts<ConditionValueNumContext>();
		}
		public ConditionValueNumContext conditionValueNum(int i) {
			return GetRuleContext<ConditionValueNumContext>(i);
		}
		public ITerminalNode GT() { return GetToken(MFSHParser.GT, 0); }
		public ConditionNumGtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionNumGt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionNumGt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionNumGtContext conditionNumGt() {
		ConditionNumGtContext _localctx = new ConditionNumGtContext(Context, State);
		EnterRule(_localctx, 48, RULE_conditionNumGt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; conditionValueNum();
			State = 192; Match(GT);
			State = 193; conditionValueNum();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionNumGeContext : ParserRuleContext {
		public ConditionValueNumContext[] conditionValueNum() {
			return GetRuleContexts<ConditionValueNumContext>();
		}
		public ConditionValueNumContext conditionValueNum(int i) {
			return GetRuleContext<ConditionValueNumContext>(i);
		}
		public ITerminalNode GE() { return GetToken(MFSHParser.GE, 0); }
		public ConditionNumGeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionNumGe; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionNumGe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionNumGeContext conditionNumGe() {
		ConditionNumGeContext _localctx = new ConditionNumGeContext(Context, State);
		EnterRule(_localctx, 50, RULE_conditionNumGe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; conditionValueNum();
			State = 196; Match(GE);
			State = 197; conditionValueNum();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionValueNumContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(MFSHParser.NAME, 0); }
		public ITerminalNode NUMBER() { return GetToken(MFSHParser.NUMBER, 0); }
		public ConditionValueNumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionValueNum; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionValueNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionValueNumContext conditionValueNum() {
		ConditionValueNumContext _localctx = new ConditionValueNumContext(Context, State);
		EnterRule(_localctx, 52, RULE_conditionValueNum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			_la = TokenStream.LA(1);
			if ( !(_la==NAME || _la==NUMBER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionValueStrContext : ParserRuleContext {
		public AnyStringContext anyString() {
			return GetRuleContext<AnyStringContext>(0);
		}
		public ConditionValueStrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionValueStr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionValueStr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionValueStrContext conditionValueStr() {
		ConditionValueStrContext _localctx = new ConditionValueStrContext(Context, State);
		EnterRule(_localctx, 54, RULE_conditionValueStr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; anyString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnyStringContext : ParserRuleContext {
		public SingleStringContext singleString() {
			return GetRuleContext<SingleStringContext>(0);
		}
		public MultiLineStringContext multiLineString() {
			return GetRuleContext<MultiLineStringContext>(0);
		}
		public AnyStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anyString; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnyString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnyStringContext anyString() {
		AnyStringContext _localctx = new AnyStringContext(Context, State);
		EnterRule(_localctx, 56, RULE_anyString);
		try {
			State = 205;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 203; singleString();
				}
				break;
			case MULTILINE_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 204; multiLineString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiLineStringContext : ParserRuleContext {
		public ITerminalNode MULTILINE_STRING() { return GetToken(MFSHParser.MULTILINE_STRING, 0); }
		public MultiLineStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiLineString; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiLineString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiLineStringContext multiLineString() {
		MultiLineStringContext _localctx = new MultiLineStringContext(Context, State);
		EnterRule(_localctx, 58, RULE_multiLineString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207; Match(MULTILINE_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleStringContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(MFSHParser.STRING, 0); }
		public SingleStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleString; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleStringContext singleString() {
		SingleStringContext _localctx = new SingleStringContext(Context, State);
		EnterRule(_localctx, 60, RULE_singleString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\"', '\xD6', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x3', '\x2', '\a', '\x2', '\x42', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', '\x45', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'P', '\n', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\a', '\n', '`', '\n', '\n', '\f', '\n', 
		'\xE', '\n', '\x63', '\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', 
		'\v', 'm', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\a', '\f', 'u', '\n', '\f', '\f', '\f', '\xE', 
		'\f', 'x', '\v', '\f', '\x5', '\f', 'z', '\n', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x85', '\n', '\xF', '\x3', 
		'\xF', '\x5', '\xF', '\x88', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\x8F', '\n', '\xF', 
		'\f', '\xF', '\xE', '\xF', '\x92', '\v', '\xF', '\x5', '\xF', '\x94', 
		'\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x98', '\n', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\xB0', '\n', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x5', 
		'\x1E', '\xD0', '\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\x2', '\x2', '!', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', 
		'\x36', '\x38', ':', '<', '>', '\x2', '\x3', '\x3', '\x2', '\x1D', '\x1E', 
		'\x2', '\xD2', '\x2', '\x43', '\x3', '\x2', '\x2', '\x2', '\x4', 'O', 
		'\x3', '\x2', '\x2', '\x2', '\x6', 'Q', '\x3', '\x2', '\x2', '\x2', '\b', 
		'S', '\x3', '\x2', '\x2', '\x2', '\n', 'U', '\x3', '\x2', '\x2', '\x2', 
		'\f', 'W', '\x3', '\x2', '\x2', '\x2', '\xE', 'Y', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '[', '\x3', '\x2', '\x2', '\x2', '\x12', ']', '\x3', '\x2', 
		'\x2', '\x2', '\x14', 'l', '\x3', '\x2', '\x2', '\x2', '\x16', 'n', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '}', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x7F', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x99', '\x3', '\x2', '\x2', '\x2', ' ', '\x9C', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\x9F', '\x3', '\x2', '\x2', '\x2', '$', '\xA2', 
		'\x3', '\x2', '\x2', '\x2', '&', '\xA6', '\x3', '\x2', '\x2', '\x2', '(', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '*', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', ',', '\xB5', '\x3', '\x2', '\x2', '\x2', '.', '\xB9', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x32', '\xC1', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\xC5', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\xC9', '\x3', '\x2', '\x2', '\x2', '\x38', '\xCB', '\x3', '\x2', 
		'\x2', '\x2', ':', '\xCF', '\x3', '\x2', '\x2', '\x2', '<', '\xD1', '\x3', 
		'\x2', '\x2', '\x2', '>', '\xD3', '\x3', '\x2', '\x2', '\x2', '@', '\x42', 
		'\x5', '\x4', '\x3', '\x2', '\x41', '@', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', '\x46', '\x3', 
		'\x2', '\x2', '\x2', '\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'G', '\a', '\x2', '\x2', '\x3', 'G', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'H', 'P', '\x5', '\x6', '\x4', '\x2', 'I', 'P', '\x5', '\b', '\x5', '\x2', 
		'J', 'P', '\x5', '\n', '\x6', '\x2', 'K', 'P', '\x5', '\f', '\a', '\x2', 
		'L', 'P', '\x5', '\xE', '\b', '\x2', 'M', 'P', '\x5', '\x10', '\t', '\x2', 
		'N', 'P', '\x5', '\x12', '\n', '\x2', 'O', 'H', '\x3', '\x2', '\x2', '\x2', 
		'O', 'I', '\x3', '\x2', '\x2', '\x2', 'O', 'J', '\x3', '\x2', '\x2', '\x2', 
		'O', 'K', '\x3', '\x2', '\x2', '\x2', 'O', 'L', '\x3', '\x2', '\x2', '\x2', 
		'O', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 'N', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x5', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\a', '\x4', '\x2', 
		'\x2', 'R', '\a', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\a', '\x5', '\x2', 
		'\x2', 'T', '\t', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\a', '\x6', '\x2', 
		'\x2', 'V', '\v', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\a', '\a', '\x2', 
		'\x2', 'X', '\r', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\a', '\b', '\x2', 
		'\x2', 'Z', '\xF', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\a', ' ', '\x2', 
		'\x2', '\\', '\x11', '\x3', '\x2', '\x2', '\x2', ']', '\x61', '\a', '\x3', 
		'\x2', '\x2', '^', '`', '\x5', '\x14', '\v', '\x2', '_', '^', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x63', '\x3', '\x2', '\x2', '\x2', '\x61', '_', '\x3', 
		'\x2', '\x2', '\x2', '\x61', '\x62', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x63', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x64', 'm', '\x5', '\x16', '\f', '\x2', '\x65', 'm', '\x5', '\x18', 
		'\r', '\x2', '\x66', 'm', '\x5', '\"', '\x12', '\x2', 'g', 'm', '\x5', 
		'$', '\x13', '\x2', 'h', 'm', '\x5', '&', '\x14', '\x2', 'i', 'm', '\x5', 
		'\x1A', '\xE', '\x2', 'j', 'm', '\x5', '\x1C', '\xF', '\x2', 'k', 'm', 
		'\x5', ' ', '\x11', '\x2', 'l', '\x64', '\x3', '\x2', '\x2', '\x2', 'l', 
		'\x65', '\x3', '\x2', '\x2', '\x2', 'l', '\x66', '\x3', '\x2', '\x2', 
		'\x2', 'l', 'g', '\x3', '\x2', '\x2', '\x2', 'l', 'h', '\x3', '\x2', '\x2', 
		'\x2', 'l', 'i', '\x3', '\x2', '\x2', '\x2', 'l', 'j', '\x3', '\x2', '\x2', 
		'\x2', 'l', 'k', '\x3', '\x2', '\x2', '\x2', 'm', '\x15', '\x3', '\x2', 
		'\x2', '\x2', 'n', 'o', '\a', '\n', '\x2', '\x2', 'o', 'p', '\a', '\x1D', 
		'\x2', '\x2', 'p', 'y', '\a', '\x15', '\x2', '\x2', 'q', 'v', '\x5', ':', 
		'\x1E', '\x2', 'r', 's', '\a', '\x16', '\x2', '\x2', 's', 'u', '\x5', 
		':', '\x1E', '\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 'u', 'x', '\x3', 
		'\x2', '\x2', '\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x3', 
		'\x2', '\x2', '\x2', 'w', 'z', '\x3', '\x2', '\x2', '\x2', 'x', 'v', '\x3', 
		'\x2', '\x2', '\x2', 'y', 'q', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x3', 
		'\x2', '\x2', '\x2', 'z', '{', '\x3', '\x2', '\x2', '\x2', '{', '|', '\a', 
		'\x17', '\x2', '\x2', '|', '\x17', '\x3', '\x2', '\x2', '\x2', '}', '~', 
		'\a', '\v', '\x2', '\x2', '~', '\x19', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'\x80', '\a', '\xE', '\x2', '\x2', '\x80', '\x81', '\a', '\x1D', '\x2', 
		'\x2', '\x81', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x82', '\x84', '\a', 
		'\xF', '\x2', '\x2', '\x83', '\x85', '\a', '\x11', '\x2', '\x2', '\x84', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '\x87', '\x3', '\x2', '\x2', '\x2', '\x86', '\x88', '\a', 
		'\x10', '\x2', '\x2', '\x87', '\x86', '\x3', '\x2', '\x2', '\x2', '\x87', 
		'\x88', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x89', '\x8A', '\a', '\x1D', '\x2', '\x2', '\x8A', '\x93', '\a', 
		'\x15', '\x2', '\x2', '\x8B', '\x90', '\a', '\x1D', '\x2', '\x2', '\x8C', 
		'\x8D', '\a', '\x16', '\x2', '\x2', '\x8D', '\x8F', '\a', '\x1D', '\x2', 
		'\x2', '\x8E', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x92', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x91', '\x94', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x90', '\x3', '\x2', '\x2', '\x2', '\x93', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x94', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '\x95', '\x97', '\a', '\x17', '\x2', 
		'\x2', '\x96', '\x98', '\x5', '\x1E', '\x10', '\x2', '\x97', '\x96', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\x98', '\x3', '\x2', '\x2', '\x2', '\x98', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\a', '\x18', '\x2', 
		'\x2', '\x9A', '\x9B', '\x5', '>', ' ', '\x2', '\x9B', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x9C', '\x9D', '\a', '\x12', '\x2', '\x2', '\x9D', 
		'\x9E', '\a', '\x1D', '\x2', '\x2', '\x9E', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x9F', '\xA0', '\a', '\f', '\x2', '\x2', '\xA0', '\xA1', '\x5', 
		'(', '\x15', '\x2', '\xA1', '#', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', 
		'\a', '\r', '\x2', '\x2', '\xA3', '\xA4', '\a', '\f', '\x2', '\x2', '\xA4', 
		'\xA5', '\x5', '(', '\x15', '\x2', '\xA5', '%', '\x3', '\x2', '\x2', '\x2', 
		'\xA6', '\xA7', '\a', '\r', '\x2', '\x2', '\xA7', '\xA8', '\x5', '(', 
		'\x15', '\x2', '\xA8', '\'', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xB0', 
		'\x5', '*', '\x16', '\x2', '\xAA', '\xB0', '\x5', ',', '\x17', '\x2', 
		'\xAB', '\xB0', '\x5', '.', '\x18', '\x2', '\xAC', '\xB0', '\x5', '\x30', 
		'\x19', '\x2', '\xAD', '\xB0', '\x5', '\x32', '\x1A', '\x2', '\xAE', '\xB0', 
		'\x5', '\x34', '\x1B', '\x2', '\xAF', '\xA9', '\x3', '\x2', '\x2', '\x2', 
		'\xAF', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAB', '\x3', '\x2', 
		'\x2', '\x2', '\xAF', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAD', 
		'\x3', '\x2', '\x2', '\x2', '\xAF', '\xAE', '\x3', '\x2', '\x2', '\x2', 
		'\xB0', ')', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x5', ':', '\x1E', 
		'\x2', '\xB2', '\xB3', '\a', '\x1C', '\x2', '\x2', '\xB3', '\xB4', '\x5', 
		':', '\x1E', '\x2', '\xB4', '+', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', 
		'\x5', '\x36', '\x1C', '\x2', '\xB6', '\xB7', '\a', '\x1C', '\x2', '\x2', 
		'\xB7', '\xB8', '\x5', '\x36', '\x1C', '\x2', '\xB8', '-', '\x3', '\x2', 
		'\x2', '\x2', '\xB9', '\xBA', '\x5', '\x36', '\x1C', '\x2', '\xBA', '\xBB', 
		'\a', '\x19', '\x2', '\x2', '\xBB', '\xBC', '\x5', '\x36', '\x1C', '\x2', 
		'\xBC', '/', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\x5', '\x36', 
		'\x1C', '\x2', '\xBE', '\xBF', '\a', '\x1B', '\x2', '\x2', '\xBF', '\xC0', 
		'\x5', '\x36', '\x1C', '\x2', '\xC0', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\xC1', '\xC2', '\x5', '\x36', '\x1C', '\x2', '\xC2', '\xC3', '\a', '\x18', 
		'\x2', '\x2', '\xC3', '\xC4', '\x5', '\x36', '\x1C', '\x2', '\xC4', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\x5', '\x36', '\x1C', '\x2', 
		'\xC6', '\xC7', '\a', '\x1A', '\x2', '\x2', '\xC7', '\xC8', '\x5', '\x36', 
		'\x1C', '\x2', '\xC8', '\x35', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', 
		'\t', '\x2', '\x2', '\x2', '\xCA', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\xCB', '\xCC', '\x5', ':', '\x1E', '\x2', '\xCC', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\xCD', '\xD0', '\x5', '>', ' ', '\x2', '\xCE', '\xD0', 
		'\x5', '<', '\x1F', '\x2', '\xCF', '\xCD', '\x3', '\x2', '\x2', '\x2', 
		'\xCF', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD0', ';', '\x3', '\x2', 
		'\x2', '\x2', '\xD1', '\xD2', '\a', '\x14', '\x2', '\x2', '\xD2', '=', 
		'\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\a', '\x13', '\x2', '\x2', 
		'\xD4', '?', '\x3', '\x2', '\x2', '\x2', '\xF', '\x43', 'O', '\x61', 'l', 
		'v', 'y', '\x84', '\x87', '\x90', '\x93', '\x97', '\xAF', '\xCF',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Eir.MFSH.Parser
