//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MFSHParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MFSH.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class MFSHParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		APPLY=1, END=2, FSHLINE=3, INCLUDE=4, INCOMPATIBLE=5, JSONARRAY=6, MACRO=7, 
		ONCE=8, PROFILE=9, TEXT=10, USE=11, STRING=12, MULTILINE_STRING=13, OPAR=14, 
		COMMA=15, CPAR=16, GT=17, NAME=18, WS=19;
	public const int
		RULE_document = 0, RULE_command = 1, RULE_fshLine = 2, RULE_apply = 3, 
		RULE_end = 4, RULE_include = 5, RULE_incompatible = 6, RULE_macro = 7, 
		RULE_profile = 8, RULE_redirect = 9, RULE_use = 10, RULE_anyString = 11, 
		RULE_multiLineString = 12, RULE_singleString = 13;
	public static readonly string[] ruleNames = {
		"document", "command", "fshLine", "apply", "end", "include", "incompatible", 
		"macro", "profile", "redirect", "use", "anyString", "multiLineString", 
		"singleString"
	};

	private static readonly string[] _LiteralNames = {
		null, "'apply'", "'end'", "'FshLine'", "'include'", "'incompatible'", 
		"'jsonArray'", "'macro'", "'once'", "'profile'", "'text'", "'use'", null, 
		null, "'('", "','", "')'", "'>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "APPLY", "END", "FSHLINE", "INCLUDE", "INCOMPATIBLE", "JSONARRAY", 
		"MACRO", "ONCE", "PROFILE", "TEXT", "USE", "STRING", "MULTILINE_STRING", 
		"OPAR", "COMMA", "CPAR", "GT", "NAME", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MFSHParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MFSHParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MFSHParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MFSHParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocumentContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(MFSHParser.Eof, 0); }
		public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << APPLY) | (1L << END) | (1L << FSHLINE) | (1L << INCLUDE) | (1L << INCOMPATIBLE) | (1L << MACRO) | (1L << PROFILE) | (1L << USE))) != 0)) {
				{
				{
				State = 28; command();
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 34; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		public FshLineContext fshLine() {
			return GetRuleContext<FshLineContext>(0);
		}
		public ApplyContext apply() {
			return GetRuleContext<ApplyContext>(0);
		}
		public EndContext end() {
			return GetRuleContext<EndContext>(0);
		}
		public IncludeContext include() {
			return GetRuleContext<IncludeContext>(0);
		}
		public IncompatibleContext incompatible() {
			return GetRuleContext<IncompatibleContext>(0);
		}
		public MacroContext macro() {
			return GetRuleContext<MacroContext>(0);
		}
		public ProfileContext profile() {
			return GetRuleContext<ProfileContext>(0);
		}
		public UseContext use() {
			return GetRuleContext<UseContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 2, RULE_command);
		try {
			State = 44;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FSHLINE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 36; fshLine();
				}
				break;
			case APPLY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 37; apply();
				}
				break;
			case END:
				EnterOuterAlt(_localctx, 3);
				{
				State = 38; end();
				}
				break;
			case INCLUDE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 39; include();
				}
				break;
			case INCOMPATIBLE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 40; incompatible();
				}
				break;
			case MACRO:
				EnterOuterAlt(_localctx, 6);
				{
				State = 41; macro();
				}
				break;
			case PROFILE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 42; profile();
				}
				break;
			case USE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 43; use();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FshLineContext : ParserRuleContext {
		public ITerminalNode FSHLINE() { return GetToken(MFSHParser.FSHLINE, 0); }
		public AnyStringContext anyString() {
			return GetRuleContext<AnyStringContext>(0);
		}
		public FshLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fshLine; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFshLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FshLineContext fshLine() {
		FshLineContext _localctx = new FshLineContext(Context, State);
		EnterRule(_localctx, 4, RULE_fshLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; Match(FSHLINE);
			State = 47; anyString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ApplyContext : ParserRuleContext {
		public ITerminalNode APPLY() { return GetToken(MFSHParser.APPLY, 0); }
		public ITerminalNode NAME() { return GetToken(MFSHParser.NAME, 0); }
		public ITerminalNode OPAR() { return GetToken(MFSHParser.OPAR, 0); }
		public ITerminalNode CPAR() { return GetToken(MFSHParser.CPAR, 0); }
		public ITerminalNode ONCE() { return GetToken(MFSHParser.ONCE, 0); }
		public AnyStringContext[] anyString() {
			return GetRuleContexts<AnyStringContext>();
		}
		public AnyStringContext anyString(int i) {
			return GetRuleContext<AnyStringContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MFSHParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MFSHParser.COMMA, i);
		}
		public ApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_apply; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitApply(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ApplyContext apply() {
		ApplyContext _localctx = new ApplyContext(Context, State);
		EnterRule(_localctx, 6, RULE_apply);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49; Match(APPLY);
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ONCE) {
				{
				State = 50; Match(ONCE);
				}
			}

			State = 53; Match(NAME);
			State = 54; Match(OPAR);
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING || _la==MULTILINE_STRING) {
				{
				State = 55; anyString();
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 56; Match(COMMA);
					State = 57; anyString();
					}
					}
					State = 62;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 65; Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndContext : ParserRuleContext {
		public ITerminalNode END() { return GetToken(MFSHParser.END, 0); }
		public EndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndContext end() {
		EndContext _localctx = new EndContext(Context, State);
		EnterRule(_localctx, 8, RULE_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeContext : ParserRuleContext {
		public ITerminalNode INCLUDE() { return GetToken(MFSHParser.INCLUDE, 0); }
		public AnyStringContext anyString() {
			return GetRuleContext<AnyStringContext>(0);
		}
		public IncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeContext include() {
		IncludeContext _localctx = new IncludeContext(Context, State);
		EnterRule(_localctx, 10, RULE_include);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; Match(INCLUDE);
			State = 70; anyString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncompatibleContext : ParserRuleContext {
		public ITerminalNode INCOMPATIBLE() { return GetToken(MFSHParser.INCOMPATIBLE, 0); }
		public ITerminalNode NAME() { return GetToken(MFSHParser.NAME, 0); }
		public IncompatibleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incompatible; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncompatible(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncompatibleContext incompatible() {
		IncompatibleContext _localctx = new IncompatibleContext(Context, State);
		EnterRule(_localctx, 12, RULE_incompatible);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(INCOMPATIBLE);
			State = 73; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroContext : ParserRuleContext {
		public ITerminalNode MACRO() { return GetToken(MFSHParser.MACRO, 0); }
		public ITerminalNode[] NAME() { return GetTokens(MFSHParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(MFSHParser.NAME, i);
		}
		public ITerminalNode OPAR() { return GetToken(MFSHParser.OPAR, 0); }
		public ITerminalNode CPAR() { return GetToken(MFSHParser.CPAR, 0); }
		public RedirectContext redirect() {
			return GetRuleContext<RedirectContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MFSHParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MFSHParser.COMMA, i);
		}
		public MacroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacro(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroContext macro() {
		MacroContext _localctx = new MacroContext(Context, State);
		EnterRule(_localctx, 14, RULE_macro);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75; Match(MACRO);
			State = 76; Match(NAME);
			State = 77; Match(OPAR);
			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 78; Match(NAME);
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 79; Match(COMMA);
					State = 80; Match(NAME);
					}
					}
					State = 85;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 88; Match(CPAR);
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GT) {
				{
				State = 89; redirect();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProfileContext : ParserRuleContext {
		public ITerminalNode PROFILE() { return GetToken(MFSHParser.PROFILE, 0); }
		public ITerminalNode NAME() { return GetToken(MFSHParser.NAME, 0); }
		public ProfileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_profile; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProfile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProfileContext profile() {
		ProfileContext _localctx = new ProfileContext(Context, State);
		EnterRule(_localctx, 16, RULE_profile);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; Match(PROFILE);
			State = 93; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedirectContext : ParserRuleContext {
		public ITerminalNode GT() { return GetToken(MFSHParser.GT, 0); }
		public ITerminalNode OPAR() { return GetToken(MFSHParser.OPAR, 0); }
		public SingleStringContext singleString() {
			return GetRuleContext<SingleStringContext>(0);
		}
		public ITerminalNode CPAR() { return GetToken(MFSHParser.CPAR, 0); }
		public ITerminalNode JSONARRAY() { return GetToken(MFSHParser.JSONARRAY, 0); }
		public ITerminalNode TEXT() { return GetToken(MFSHParser.TEXT, 0); }
		public RedirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redirect; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedirect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedirectContext redirect() {
		RedirectContext _localctx = new RedirectContext(Context, State);
		EnterRule(_localctx, 18, RULE_redirect);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95; Match(GT);
			State = 96;
			_la = TokenStream.LA(1);
			if ( !(_la==JSONARRAY || _la==TEXT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 97; Match(OPAR);
			State = 98; singleString();
			State = 99; Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseContext : ParserRuleContext {
		public ITerminalNode USE() { return GetToken(MFSHParser.USE, 0); }
		public AnyStringContext anyString() {
			return GetRuleContext<AnyStringContext>(0);
		}
		public UseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_use; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseContext use() {
		UseContext _localctx = new UseContext(Context, State);
		EnterRule(_localctx, 20, RULE_use);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; Match(USE);
			State = 102; anyString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnyStringContext : ParserRuleContext {
		public SingleStringContext singleString() {
			return GetRuleContext<SingleStringContext>(0);
		}
		public MultiLineStringContext multiLineString() {
			return GetRuleContext<MultiLineStringContext>(0);
		}
		public AnyStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anyString; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnyString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnyStringContext anyString() {
		AnyStringContext _localctx = new AnyStringContext(Context, State);
		EnterRule(_localctx, 22, RULE_anyString);
		try {
			State = 106;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 104; singleString();
				}
				break;
			case MULTILINE_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 105; multiLineString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiLineStringContext : ParserRuleContext {
		public ITerminalNode MULTILINE_STRING() { return GetToken(MFSHParser.MULTILINE_STRING, 0); }
		public MultiLineStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiLineString; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiLineString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiLineStringContext multiLineString() {
		MultiLineStringContext _localctx = new MultiLineStringContext(Context, State);
		EnterRule(_localctx, 24, RULE_multiLineString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(MULTILINE_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleStringContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(MFSHParser.STRING, 0); }
		public SingleStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleString; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleStringContext singleString() {
		SingleStringContext _localctx = new SingleStringContext(Context, State);
		EnterRule(_localctx, 26, RULE_singleString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x15', 's', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\a', '\x2', ' ', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '#', '\v', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '/', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\x36', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '=', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', '@', '\v', '\x5', '\x5', '\x5', '\x42', '\n', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\a', '\t', 'T', '\n', '\t', '\f', '\t', '\xE', '\t', 'W', '\v', 
		'\t', '\x5', '\t', 'Y', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		']', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x5', '\r', 'm', 
		'\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x2', '\x2', '\x10', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x2', '\x3', 
		'\x4', '\x2', '\b', '\b', '\f', '\f', '\x2', 's', '\x2', '!', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '.', '\x3', '\x2', '\x2', '\x2', '\x6', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x33', '\x3', '\x2', '\x2', '\x2', '\n', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'G', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'J', '\x3', '\x2', '\x2', '\x2', '\x10', 'M', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '^', '\x3', '\x2', '\x2', '\x2', '\x14', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '\x16', 'g', '\x3', '\x2', '\x2', '\x2', '\x18', 'l', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', 'n', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'p', '\x3', '\x2', '\x2', '\x2', '\x1E', ' ', '\x5', '\x4', '\x3', '\x2', 
		'\x1F', '\x1E', '\x3', '\x2', '\x2', '\x2', ' ', '#', '\x3', '\x2', '\x2', 
		'\x2', '!', '\x1F', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\x3', '\x2', 
		'\x2', '\x2', '\"', '$', '\x3', '\x2', '\x2', '\x2', '#', '!', '\x3', 
		'\x2', '\x2', '\x2', '$', '%', '\a', '\x2', '\x2', '\x3', '%', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '&', '/', '\x5', '\x6', '\x4', '\x2', '\'', 
		'/', '\x5', '\b', '\x5', '\x2', '(', '/', '\x5', '\n', '\x6', '\x2', ')', 
		'/', '\x5', '\f', '\a', '\x2', '*', '/', '\x5', '\xE', '\b', '\x2', '+', 
		'/', '\x5', '\x10', '\t', '\x2', ',', '/', '\x5', '\x12', '\n', '\x2', 
		'-', '/', '\x5', '\x16', '\f', '\x2', '.', '&', '\x3', '\x2', '\x2', '\x2', 
		'.', '\'', '\x3', '\x2', '\x2', '\x2', '.', '(', '\x3', '\x2', '\x2', 
		'\x2', '.', ')', '\x3', '\x2', '\x2', '\x2', '.', '*', '\x3', '\x2', '\x2', 
		'\x2', '.', '+', '\x3', '\x2', '\x2', '\x2', '.', ',', '\x3', '\x2', '\x2', 
		'\x2', '.', '-', '\x3', '\x2', '\x2', '\x2', '/', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x31', '\a', '\x5', '\x2', '\x2', '\x31', '\x32', 
		'\x5', '\x18', '\r', '\x2', '\x32', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x33', '\x35', '\a', '\x3', '\x2', '\x2', '\x34', '\x36', '\a', '\n', 
		'\x2', '\x2', '\x35', '\x34', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x37', '\x38', '\a', '\x14', '\x2', '\x2', '\x38', '\x41', '\a', '\x10', 
		'\x2', '\x2', '\x39', '>', '\x5', '\x18', '\r', '\x2', ':', ';', '\a', 
		'\x11', '\x2', '\x2', ';', '=', '\x5', '\x18', '\r', '\x2', '<', ':', 
		'\x3', '\x2', '\x2', '\x2', '=', '@', '\x3', '\x2', '\x2', '\x2', '>', 
		'<', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', 
		'?', '\x42', '\x3', '\x2', '\x2', '\x2', '@', '>', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x39', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x43', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x44', '\a', '\x12', '\x2', '\x2', '\x44', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x45', '\x46', '\a', '\x4', '\x2', '\x2', '\x46', '\v', '\x3', 
		'\x2', '\x2', '\x2', 'G', 'H', '\a', '\x6', '\x2', '\x2', 'H', 'I', '\x5', 
		'\x18', '\r', '\x2', 'I', '\r', '\x3', '\x2', '\x2', '\x2', 'J', 'K', 
		'\a', '\a', '\x2', '\x2', 'K', 'L', '\a', '\x14', '\x2', '\x2', 'L', '\xF', 
		'\x3', '\x2', '\x2', '\x2', 'M', 'N', '\a', '\t', '\x2', '\x2', 'N', 'O', 
		'\a', '\x14', '\x2', '\x2', 'O', 'X', '\a', '\x10', '\x2', '\x2', 'P', 
		'U', '\a', '\x14', '\x2', '\x2', 'Q', 'R', '\a', '\x11', '\x2', '\x2', 
		'R', 'T', '\a', '\x14', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'T', 'W', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 
		'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'W', 'U', '\x3', '\x2', '\x2', '\x2', 'X', 'P', '\x3', '\x2', '\x2', '\x2', 
		'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\\', '\a', '\x12', '\x2', '\x2', '[', ']', '\x5', '\x14', '\v', 
		'\x2', '\\', '[', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\x3', '\x2', 
		'\x2', '\x2', ']', '\x11', '\x3', '\x2', '\x2', '\x2', '^', '_', '\a', 
		'\v', '\x2', '\x2', '_', '`', '\a', '\x14', '\x2', '\x2', '`', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\a', '\x13', '\x2', '\x2', 
		'\x62', '\x63', '\t', '\x2', '\x2', '\x2', '\x63', '\x64', '\a', '\x10', 
		'\x2', '\x2', '\x64', '\x65', '\x5', '\x1C', '\xF', '\x2', '\x65', '\x66', 
		'\a', '\x12', '\x2', '\x2', '\x66', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'g', 'h', '\a', '\r', '\x2', '\x2', 'h', 'i', '\x5', '\x18', '\r', '\x2', 
		'i', '\x17', '\x3', '\x2', '\x2', '\x2', 'j', 'm', '\x5', '\x1C', '\xF', 
		'\x2', 'k', 'm', '\x5', '\x1A', '\xE', '\x2', 'l', 'j', '\x3', '\x2', 
		'\x2', '\x2', 'l', 'k', '\x3', '\x2', '\x2', '\x2', 'm', '\x19', '\x3', 
		'\x2', '\x2', '\x2', 'n', 'o', '\a', '\xF', '\x2', '\x2', 'o', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', 'p', 'q', '\a', '\xE', '\x2', '\x2', 'q', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\v', '!', '.', '\x35', '>', '\x41', 
		'U', 'X', '\\', 'l',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MFSH.Parser
