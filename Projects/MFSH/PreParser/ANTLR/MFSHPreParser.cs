//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MFSHPreParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MFSH.PreParser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class MFSHPreParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EOL=1, TEXT=2, LB=3, WS=4, CR=5;
	public const int
		RULE_text = 0, RULE_fsh = 1, RULE_mfsh = 2;
	public static readonly string[] ruleNames = {
		"text", "fsh", "mfsh"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\n'", null, "'#'", null, "'\r'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EOL", "TEXT", "LB", "WS", "CR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MFSHPreParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MFSHPreParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MFSHPreParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MFSHPreParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TextContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(MFSHPreParser.Eof, 0); }
		public FshContext[] fsh() {
			return GetRuleContexts<FshContext>();
		}
		public FshContext fsh(int i) {
			return GetRuleContext<FshContext>(i);
		}
		public MfshContext[] mfsh() {
			return GetRuleContexts<MfshContext>();
		}
		public MfshContext mfsh(int i) {
			return GetRuleContext<MfshContext>(i);
		}
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHPreParserVisitor<TResult> typedVisitor = visitor as IMFSHPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 0, RULE_text);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EOL) | (1L << TEXT) | (1L << LB) | (1L << WS))) != 0)) {
				{
				State = 8;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 6; fsh();
					}
					break;
				case 2:
					{
					State = 7; mfsh();
					}
					break;
				}
				}
				State = 12;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 13; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FshContext : ParserRuleContext {
		public ITerminalNode EOL() { return GetToken(MFSHPreParser.EOL, 0); }
		public ITerminalNode[] WS() { return GetTokens(MFSHPreParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(MFSHPreParser.WS, i);
		}
		public ITerminalNode[] TEXT() { return GetTokens(MFSHPreParser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(MFSHPreParser.TEXT, i);
		}
		public ITerminalNode[] LB() { return GetTokens(MFSHPreParser.LB); }
		public ITerminalNode LB(int i) {
			return GetToken(MFSHPreParser.LB, i);
		}
		public FshContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fsh; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHPreParserVisitor<TResult> typedVisitor = visitor as IMFSHPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFsh(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FshContext fsh() {
		FshContext _localctx = new FshContext(Context, State);
		EnterRule(_localctx, 2, RULE_fsh);
		int _la;
		try {
			State = 32;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 16;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 15; Match(WS);
					}
				}

				State = 25;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TEXT) {
					{
					State = 18; Match(TEXT);
					State = 22;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TEXT) | (1L << LB) | (1L << WS))) != 0)) {
						{
						{
						State = 19;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TEXT) | (1L << LB) | (1L << WS))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						}
						State = 24;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 27; Match(EOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 29;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 28; Match(WS);
					}
				}

				State = 31; Match(EOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MfshContext : ParserRuleContext {
		public ITerminalNode[] LB() { return GetTokens(MFSHPreParser.LB); }
		public ITerminalNode LB(int i) {
			return GetToken(MFSHPreParser.LB, i);
		}
		public ITerminalNode EOL() { return GetToken(MFSHPreParser.EOL, 0); }
		public ITerminalNode[] WS() { return GetTokens(MFSHPreParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(MFSHPreParser.WS, i);
		}
		public ITerminalNode[] TEXT() { return GetTokens(MFSHPreParser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(MFSHPreParser.TEXT, i);
		}
		public MfshContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mfsh; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHPreParserVisitor<TResult> typedVisitor = visitor as IMFSHPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMfsh(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MfshContext mfsh() {
		MfshContext _localctx = new MfshContext(Context, State);
		EnterRule(_localctx, 4, RULE_mfsh);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 34; Match(WS);
				}
			}

			State = 37; Match(LB);
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TEXT) | (1L << LB) | (1L << WS))) != 0)) {
				{
				{
				State = 38;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TEXT) | (1L << LB) | (1L << WS))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 44; Match(EOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\a', '\x31', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x3', '\x2', '\x3', '\x2', '\a', 
		'\x2', '\v', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\xE', '\v', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x5', '\x3', '\x13', '\n', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x17', '\n', '\x3', '\f', 
		'\x3', '\xE', '\x3', '\x1A', '\v', '\x3', '\x5', '\x3', '\x1C', '\n', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', ' ', '\n', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '#', '\n', '\x3', '\x3', '\x4', '\x5', '\x4', '&', 
		'\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '*', '\n', '\x4', 
		'\f', '\x4', '\xE', '\x4', '-', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x2', '\x2', '\x5', '\x2', '\x4', '\x6', '\x2', '\x3', 
		'\x3', '\x2', '\x4', '\x6', '\x2', '\x36', '\x2', '\f', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\"', '\x3', '\x2', '\x2', '\x2', '\x6', '%', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\v', '\x5', '\x4', '\x3', '\x2', '\t', '\v', 
		'\x5', '\x6', '\x4', '\x2', '\n', '\b', '\x3', '\x2', '\x2', '\x2', '\n', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\v', '\xE', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\n', '\x3', '\x2', '\x2', '\x2', '\f', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\r', '\xF', '\x3', '\x2', '\x2', '\x2', '\xE', '\f', '\x3', '\x2', 
		'\x2', '\x2', '\xF', '\x10', '\a', '\x2', '\x2', '\x3', '\x10', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x11', '\x13', '\a', '\x6', '\x2', '\x2', 
		'\x12', '\x11', '\x3', '\x2', '\x2', '\x2', '\x12', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x13', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x14', '\x18', 
		'\a', '\x4', '\x2', '\x2', '\x15', '\x17', '\t', '\x2', '\x2', '\x2', 
		'\x16', '\x15', '\x3', '\x2', '\x2', '\x2', '\x17', '\x1A', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x16', '\x3', '\x2', '\x2', '\x2', '\x18', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x19', '\x1C', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x18', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x14', '\x3', '\x2', 
		'\x2', '\x2', '\x1B', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x1D', '#', '\a', '\x3', '\x2', '\x2', '\x1E', 
		' ', '\a', '\x6', '\x2', '\x2', '\x1F', '\x1E', '\x3', '\x2', '\x2', '\x2', 
		'\x1F', ' ', '\x3', '\x2', '\x2', '\x2', ' ', '!', '\x3', '\x2', '\x2', 
		'\x2', '!', '#', '\a', '\x3', '\x2', '\x2', '\"', '\x12', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\x1F', '\x3', '\x2', '\x2', '\x2', '#', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '$', '&', '\a', '\x6', '\x2', '\x2', '%', '$', '\x3', 
		'\x2', '\x2', '\x2', '%', '&', '\x3', '\x2', '\x2', '\x2', '&', '\'', 
		'\x3', '\x2', '\x2', '\x2', '\'', '+', '\a', '\x5', '\x2', '\x2', '(', 
		'*', '\t', '\x2', '\x2', '\x2', ')', '(', '\x3', '\x2', '\x2', '\x2', 
		'*', '-', '\x3', '\x2', '\x2', '\x2', '+', ')', '\x3', '\x2', '\x2', '\x2', 
		'+', ',', '\x3', '\x2', '\x2', '\x2', ',', '.', '\x3', '\x2', '\x2', '\x2', 
		'-', '+', '\x3', '\x2', '\x2', '\x2', '.', '/', '\a', '\x3', '\x2', '\x2', 
		'/', '\a', '\x3', '\x2', '\x2', '\x2', '\v', '\n', '\f', '\x12', '\x18', 
		'\x1B', '\x1F', '\"', '%', '+',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MFSH.PreParser
