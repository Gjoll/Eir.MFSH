//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MFSHLexer.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MFSH {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class MFSHLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		MSTART=1, LINE=2, CR=3, Err=4, MINCLUDE=5, MDEFINE=6, MENDDEF=7, MAPPLY=8, 
		MEND=9, MSTRING=10, MOPAR=11, MCOMMA=12, MCPAR=13, MPNAME=14, MWS=15, 
		MErr=16;
	public const int
		MFSH=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "MFSH"
	};

	public static readonly string[] ruleNames = {
		"MSTART", "LINE", "CR", "Err", "MINCLUDE", "MDEFINE", "MENDDEF", "MAPPLY", 
		"MEND", "MSTRING", "MOPAR", "MCOMMA", "MCPAR", "MPNAME", "MWS", "MErr"
	};


	public MFSHLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MFSHLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'\r'", null, "'include'", "'define'", "'enddef'", "'apply'", 
		null, null, "'('", "','", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "MSTART", "LINE", "CR", "Err", "MINCLUDE", "MDEFINE", "MENDDEF", 
		"MAPPLY", "MEND", "MSTRING", "MOPAR", "MCOMMA", "MCPAR", "MPNAME", "MWS", 
		"MErr"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MFSHLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MFSHLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x12', '\x97', '\b', '\x1', '\b', '\x1', '\x4', '\x2', 
		'\t', '\x2', '\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', 
		'\x5', '\t', '\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', 
		'\x4', '\b', '\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', 
		'\x4', '\v', '\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', 
		'\x4', '\xE', '\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', 
		'\x10', '\x4', '\x11', '\t', '\x11', '\x3', '\x2', '\a', '\x2', '&', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', ')', '\v', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\a', '\x3', '\x30', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x33', '\v', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\a', '\x3', '\x37', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		':', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\a', '\n', '\x62', '\n', '\n', '\f', '\n', 
		'\xE', '\n', '\x65', '\v', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\a', '\v', 'm', '\n', '\v', '\f', 
		'\v', '\xE', '\v', 'p', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x6', '\xF', '|', '\n', '\xF', '\r', '\xF', '\xE', 
		'\xF', '}', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x6', '\xF', '\x83', 
		'\n', '\xF', '\r', '\xF', '\xE', '\xF', '\x84', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x6', '\xF', '\x8B', '\n', '\xF', '\r', '\xF', 
		'\xE', '\xF', '\x8C', '\x3', '\xF', '\x5', '\xF', '\x90', '\n', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x2', '\x2', '\x12', '\x4', '\x3', '\x6', '\x4', '\b', 
		'\x5', '\n', '\x6', '\f', '\a', '\xE', '\b', '\x10', '\t', '\x12', '\n', 
		'\x14', '\v', '\x16', '\f', '\x18', '\r', '\x1A', '\xE', '\x1C', '\xF', 
		'\x1E', '\x10', ' ', '\x11', '\"', '\x12', '\x4', '\x2', '\x3', '\t', 
		'\x4', '\x2', '\v', '\v', '\"', '\"', '\x3', '\x2', '%', '%', '\x3', '\x2', 
		'\f', '\f', '\x3', '\x2', '$', '$', '\x4', '\x2', '\x43', '\\', '\x63', 
		'|', '\x5', '\x2', '\x32', ';', '\x43', '\\', '\x63', '|', '\x6', '\x2', 
		'\v', '\f', '\xF', '\xF', '\"', '\"', '%', '%', '\x2', '\x9F', '\x2', 
		'\x4', '\x3', '\x2', '\x2', '\x2', '\x2', '\x6', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\b', '\x3', '\x2', '\x2', '\x2', '\x2', '\n', '\x3', '\x2', 
		'\x2', '\x2', '\x3', '\f', '\x3', '\x2', '\x2', '\x2', '\x3', '\xE', '\x3', 
		'\x2', '\x2', '\x2', '\x3', '\x10', '\x3', '\x2', '\x2', '\x2', '\x3', 
		'\x12', '\x3', '\x2', '\x2', '\x2', '\x3', '\x14', '\x3', '\x2', '\x2', 
		'\x2', '\x3', '\x16', '\x3', '\x2', '\x2', '\x2', '\x3', '\x18', '\x3', 
		'\x2', '\x2', '\x2', '\x3', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x3', 
		'\x1C', '\x3', '\x2', '\x2', '\x2', '\x3', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '\x3', ' ', '\x3', '\x2', '\x2', '\x2', '\x3', '\"', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\'', '\x3', '\x2', '\x2', '\x2', '\x6', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\b', '=', '\x3', '\x2', '\x2', '\x2', '\n', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\f', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\xE', 'K', '\x3', '\x2', '\x2', '\x2', '\x10', 'R', '\x3', '\x2', 
		'\x2', '\x2', '\x12', 'Y', '\x3', '\x2', '\x2', '\x2', '\x14', '_', '\x3', 
		'\x2', '\x2', '\x2', '\x16', 'j', '\x3', '\x2', '\x2', '\x2', '\x18', 
		's', '\x3', '\x2', '\x2', '\x2', '\x1A', 'u', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', 'w', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x8F', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\x91', '\x3', '\x2', '\x2', '\x2', '\"', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '$', '&', '\t', '\x2', '\x2', '\x2', '%', '$', '\x3', 
		'\x2', '\x2', '\x2', '&', ')', '\x3', '\x2', '\x2', '\x2', '\'', '%', 
		'\x3', '\x2', '\x2', '\x2', '\'', '(', '\x3', '\x2', '\x2', '\x2', '(', 
		'*', '\x3', '\x2', '\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', 
		'*', '+', '\a', '%', '\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', '\x2', 
		',', '-', '\b', '\x2', '\x2', '\x2', '-', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '.', '\x30', '\t', '\x2', '\x2', '\x2', '/', '.', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x33', '\x3', '\x2', '\x2', '\x2', '\x31', '/', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x34', '\x3', '\x2', '\x2', '\x2', '\x33', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x38', '\n', '\x3', '\x2', '\x2', '\x35', '\x37', 
		'\n', '\x4', '\x2', '\x2', '\x36', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x37', ':', '\x3', '\x2', '\x2', '\x2', '\x38', '\x36', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x39', '\x3', '\x2', '\x2', '\x2', '\x39', ';', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x38', '\x3', '\x2', '\x2', '\x2', ';', 
		'<', '\a', '\f', '\x2', '\x2', '<', '\a', '\x3', '\x2', '\x2', '\x2', 
		'=', '>', '\a', '\xF', '\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', 
		'?', '@', '\b', '\x4', '\x3', '\x2', '@', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x41', '\x42', '\v', '\x2', '\x2', '\x2', '\x42', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x43', '\x44', '\a', 'k', '\x2', '\x2', '\x44', '\x45', 
		'\a', 'p', '\x2', '\x2', '\x45', '\x46', '\a', '\x65', '\x2', '\x2', '\x46', 
		'G', '\a', 'n', '\x2', '\x2', 'G', 'H', '\a', 'w', '\x2', '\x2', 'H', 
		'I', '\a', '\x66', '\x2', '\x2', 'I', 'J', '\a', 'g', '\x2', '\x2', 'J', 
		'\r', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\a', '\x66', '\x2', '\x2', 
		'L', 'M', '\a', 'g', '\x2', '\x2', 'M', 'N', '\a', 'h', '\x2', '\x2', 
		'N', 'O', '\a', 'k', '\x2', '\x2', 'O', 'P', '\a', 'p', '\x2', '\x2', 
		'P', 'Q', '\a', 'g', '\x2', '\x2', 'Q', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'R', 'S', '\a', 'g', '\x2', '\x2', 'S', 'T', '\a', 'p', '\x2', '\x2', 
		'T', 'U', '\a', '\x66', '\x2', '\x2', 'U', 'V', '\a', '\x66', '\x2', '\x2', 
		'V', 'W', '\a', 'g', '\x2', '\x2', 'W', 'X', '\a', 'h', '\x2', '\x2', 
		'X', '\x11', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\a', '\x63', '\x2', 
		'\x2', 'Z', '[', '\a', 'r', '\x2', '\x2', '[', '\\', '\a', 'r', '\x2', 
		'\x2', '\\', ']', '\a', 'n', '\x2', '\x2', ']', '^', '\a', '{', '\x2', 
		'\x2', '^', '\x13', '\x3', '\x2', '\x2', '\x2', '_', '\x63', '\a', '\f', 
		'\x2', '\x2', '`', '\x62', '\t', '\x2', '\x2', '\x2', '\x61', '`', '\x3', 
		'\x2', '\x2', '\x2', '\x62', '\x65', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x64', '\x66', '\x3', '\x2', '\x2', '\x2', '\x65', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x66', 'g', '\n', '\x3', '\x2', '\x2', 'g', 'h', 
		'\x3', '\x2', '\x2', '\x2', 'h', 'i', '\b', '\n', '\x4', '\x2', 'i', '\x15', 
		'\x3', '\x2', '\x2', '\x2', 'j', 'n', '\a', '$', '\x2', '\x2', 'k', 'm', 
		'\n', '\x5', '\x2', '\x2', 'l', 'k', '\x3', '\x2', '\x2', '\x2', 'm', 
		'p', '\x3', '\x2', '\x2', '\x2', 'n', 'l', '\x3', '\x2', '\x2', '\x2', 
		'n', 'o', '\x3', '\x2', '\x2', '\x2', 'o', 'q', '\x3', '\x2', '\x2', '\x2', 
		'p', 'n', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\a', '$', '\x2', '\x2', 
		'r', '\x17', '\x3', '\x2', '\x2', '\x2', 's', 't', '\a', '*', '\x2', '\x2', 
		't', '\x19', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\a', '.', '\x2', '\x2', 
		'v', '\x1B', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\a', '+', '\x2', '\x2', 
		'x', '\x1D', '\x3', '\x2', '\x2', '\x2', 'y', '{', '\t', '\x6', '\x2', 
		'\x2', 'z', '|', '\t', '\a', '\x2', '\x2', '{', 'z', '\x3', '\x2', '\x2', 
		'\x2', '|', '}', '\x3', '\x2', '\x2', '\x2', '}', '{', '\x3', '\x2', '\x2', 
		'\x2', '}', '~', '\x3', '\x2', '\x2', '\x2', '~', '\x90', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', '\x80', '\a', '&', '\x2', '\x2', '\x80', '\x82', 
		'\t', '\x6', '\x2', '\x2', '\x81', '\x83', '\t', '\a', '\x2', '\x2', '\x82', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x84', '\x82', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x85', '\x86', '\x3', '\x2', '\x2', '\x2', '\x86', 
		'\x90', '\a', '&', '\x2', '\x2', '\x87', '\x88', '\a', '\'', '\x2', '\x2', 
		'\x88', '\x8A', '\t', '\x6', '\x2', '\x2', '\x89', '\x8B', '\t', '\a', 
		'\x2', '\x2', '\x8A', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x8A', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x90', '\a', '\'', '\x2', '\x2', '\x8F', 'y', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x90', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x91', '\x92', '\t', '\b', '\x2', '\x2', '\x92', '\x93', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x94', '\b', '\x10', '\x3', '\x2', '\x94', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\v', '\x2', '\x2', '\x2', 
		'\x96', '#', '\x3', '\x2', '\x2', '\x2', '\r', '\x2', '\x3', '\'', '\x31', 
		'\x38', '\x63', 'n', '}', '\x84', '\x8C', '\x8F', '\x5', '\a', '\x3', 
		'\x2', '\b', '\x2', '\x2', '\x6', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MFSH
