//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MFSHParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MFSH {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class MFSHParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		MSTART=1, FSHLINE=2, CR=3, Err=4, MINCLUDE=5, MUSE=6, MMACRO=7, MEND=8, 
		MAPPLY=9, MMODECONT=10, MSTRING=11, MSTARTMLSTRING=12, MFSHLINE=13, MOPAR=14, 
		MCOMMA=15, MCPAR=16, MPNAME=17, MWS=18, MErr=19, MLCONT=20, MMLENDSTRING=21, 
		MLTEXT=22;
	public const int
		RULE_document = 0, RULE_fsh = 1, RULE_mCommands = 2, RULE_mModeStart = 3, 
		RULE_mCommand = 4, RULE_mInclude = 5, RULE_mUse = 6, RULE_mMacro = 7, 
		RULE_mApply = 8, RULE_mEnd = 9, RULE_mString = 10, RULE_mSingleString = 11, 
		RULE_mlString = 12, RULE_mlCont = 13, RULE_mlText = 14;
	public static readonly string[] ruleNames = {
		"document", "fsh", "mCommands", "mModeStart", "mCommand", "mInclude", 
		"mUse", "mMacro", "mApply", "mEnd", "mString", "mSingleString", "mlString", 
		"mlCont", "mlText"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'\r'", null, "'include'", "'use'", "'macro'", "'end'", 
		"'apply'", null, null, null, null, "'('", "','", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "MSTART", "FSHLINE", "CR", "Err", "MINCLUDE", "MUSE", "MMACRO", 
		"MEND", "MAPPLY", "MMODECONT", "MSTRING", "MSTARTMLSTRING", "MFSHLINE", 
		"MOPAR", "MCOMMA", "MCPAR", "MPNAME", "MWS", "MErr", "MLCONT", "MMLENDSTRING", 
		"MLTEXT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MFSHParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MFSHParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MFSHParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MFSHParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocumentContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(MFSHParser.Eof, 0); }
		public FshContext[] fsh() {
			return GetRuleContexts<FshContext>();
		}
		public FshContext fsh(int i) {
			return GetRuleContext<FshContext>(i);
		}
		public MCommandsContext[] mCommands() {
			return GetRuleContexts<MCommandsContext>();
		}
		public MCommandsContext mCommands(int i) {
			return GetRuleContext<MCommandsContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MSTART) | (1L << FSHLINE) | (1L << MFSHLINE))) != 0)) {
				{
				State = 32;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FSHLINE:
				case MFSHLINE:
					{
					State = 30; fsh();
					}
					break;
				case MSTART:
					{
					State = 31; mCommands();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 36;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 37; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FshContext : ParserRuleContext {
		public ITerminalNode FSHLINE() { return GetToken(MFSHParser.FSHLINE, 0); }
		public ITerminalNode MFSHLINE() { return GetToken(MFSHParser.MFSHLINE, 0); }
		public FshContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fsh; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFsh(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FshContext fsh() {
		FshContext _localctx = new FshContext(Context, State);
		EnterRule(_localctx, 2, RULE_fsh);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			_la = TokenStream.LA(1);
			if ( !(_la==FSHLINE || _la==MFSHLINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MCommandsContext : ParserRuleContext {
		public MModeStartContext mModeStart() {
			return GetRuleContext<MModeStartContext>(0);
		}
		public MCommandContext[] mCommand() {
			return GetRuleContexts<MCommandContext>();
		}
		public MCommandContext mCommand(int i) {
			return GetRuleContext<MCommandContext>(i);
		}
		public MCommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mCommands; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMCommands(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MCommandsContext mCommands() {
		MCommandsContext _localctx = new MCommandsContext(Context, State);
		EnterRule(_localctx, 4, RULE_mCommands);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41; mModeStart();
			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 42; mCommand();
				}
				}
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MINCLUDE) | (1L << MUSE) | (1L << MMACRO) | (1L << MEND) | (1L << MAPPLY))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MModeStartContext : ParserRuleContext {
		public ITerminalNode MSTART() { return GetToken(MFSHParser.MSTART, 0); }
		public MModeStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mModeStart; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMModeStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MModeStartContext mModeStart() {
		MModeStartContext _localctx = new MModeStartContext(Context, State);
		EnterRule(_localctx, 6, RULE_mModeStart);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47; Match(MSTART);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MCommandContext : ParserRuleContext {
		public MIncludeContext mInclude() {
			return GetRuleContext<MIncludeContext>(0);
		}
		public MUseContext mUse() {
			return GetRuleContext<MUseContext>(0);
		}
		public MMacroContext mMacro() {
			return GetRuleContext<MMacroContext>(0);
		}
		public MApplyContext mApply() {
			return GetRuleContext<MApplyContext>(0);
		}
		public MEndContext mEnd() {
			return GetRuleContext<MEndContext>(0);
		}
		public MCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mCommand; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MCommandContext mCommand() {
		MCommandContext _localctx = new MCommandContext(Context, State);
		EnterRule(_localctx, 8, RULE_mCommand);
		try {
			State = 54;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MINCLUDE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 49; mInclude();
				}
				break;
			case MUSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 50; mUse();
				}
				break;
			case MMACRO:
				EnterOuterAlt(_localctx, 3);
				{
				State = 51; mMacro();
				}
				break;
			case MAPPLY:
				EnterOuterAlt(_localctx, 4);
				{
				State = 52; mApply();
				}
				break;
			case MEND:
				EnterOuterAlt(_localctx, 5);
				{
				State = 53; mEnd();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MIncludeContext : ParserRuleContext {
		public ITerminalNode MINCLUDE() { return GetToken(MFSHParser.MINCLUDE, 0); }
		public ITerminalNode MSTRING() { return GetToken(MFSHParser.MSTRING, 0); }
		public MIncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mInclude; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMInclude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MIncludeContext mInclude() {
		MIncludeContext _localctx = new MIncludeContext(Context, State);
		EnterRule(_localctx, 10, RULE_mInclude);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; Match(MINCLUDE);
			State = 57; Match(MSTRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MUseContext : ParserRuleContext {
		public ITerminalNode MUSE() { return GetToken(MFSHParser.MUSE, 0); }
		public ITerminalNode MSTRING() { return GetToken(MFSHParser.MSTRING, 0); }
		public MUseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mUse; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMUse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MUseContext mUse() {
		MUseContext _localctx = new MUseContext(Context, State);
		EnterRule(_localctx, 12, RULE_mUse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59; Match(MUSE);
			State = 60; Match(MSTRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MMacroContext : ParserRuleContext {
		public ITerminalNode MMACRO() { return GetToken(MFSHParser.MMACRO, 0); }
		public ITerminalNode[] MPNAME() { return GetTokens(MFSHParser.MPNAME); }
		public ITerminalNode MPNAME(int i) {
			return GetToken(MFSHParser.MPNAME, i);
		}
		public ITerminalNode MOPAR() { return GetToken(MFSHParser.MOPAR, 0); }
		public ITerminalNode MCPAR() { return GetToken(MFSHParser.MCPAR, 0); }
		public ITerminalNode[] MCOMMA() { return GetTokens(MFSHParser.MCOMMA); }
		public ITerminalNode MCOMMA(int i) {
			return GetToken(MFSHParser.MCOMMA, i);
		}
		public MMacroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mMacro; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMMacro(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MMacroContext mMacro() {
		MMacroContext _localctx = new MMacroContext(Context, State);
		EnterRule(_localctx, 14, RULE_mMacro);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; Match(MMACRO);
			State = 63; Match(MPNAME);
			{
			State = 64; Match(MOPAR);
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MPNAME) {
				{
				State = 65; Match(MPNAME);
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==MCOMMA) {
					{
					{
					State = 66; Match(MCOMMA);
					State = 67; Match(MPNAME);
					}
					}
					State = 72;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 75; Match(MCPAR);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MApplyContext : ParserRuleContext {
		public ITerminalNode MAPPLY() { return GetToken(MFSHParser.MAPPLY, 0); }
		public ITerminalNode MPNAME() { return GetToken(MFSHParser.MPNAME, 0); }
		public ITerminalNode MOPAR() { return GetToken(MFSHParser.MOPAR, 0); }
		public ITerminalNode MCPAR() { return GetToken(MFSHParser.MCPAR, 0); }
		public MStringContext[] mString() {
			return GetRuleContexts<MStringContext>();
		}
		public MStringContext mString(int i) {
			return GetRuleContext<MStringContext>(i);
		}
		public ITerminalNode[] MCOMMA() { return GetTokens(MFSHParser.MCOMMA); }
		public ITerminalNode MCOMMA(int i) {
			return GetToken(MFSHParser.MCOMMA, i);
		}
		public MApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mApply; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMApply(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MApplyContext mApply() {
		MApplyContext _localctx = new MApplyContext(Context, State);
		EnterRule(_localctx, 16, RULE_mApply);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; Match(MAPPLY);
			State = 78; Match(MPNAME);
			State = 79; Match(MOPAR);
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MSTRING || _la==MSTARTMLSTRING) {
				{
				State = 80; mString();
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==MCOMMA) {
					{
					{
					State = 81; Match(MCOMMA);
					State = 82; mString();
					}
					}
					State = 87;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 90; Match(MCPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MEndContext : ParserRuleContext {
		public ITerminalNode MEND() { return GetToken(MFSHParser.MEND, 0); }
		public MEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mEnd; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MEndContext mEnd() {
		MEndContext _localctx = new MEndContext(Context, State);
		EnterRule(_localctx, 18, RULE_mEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; Match(MEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MStringContext : ParserRuleContext {
		public MSingleStringContext mSingleString() {
			return GetRuleContext<MSingleStringContext>(0);
		}
		public MlStringContext mlString() {
			return GetRuleContext<MlStringContext>(0);
		}
		public MStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mString; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MStringContext mString() {
		MStringContext _localctx = new MStringContext(Context, State);
		EnterRule(_localctx, 20, RULE_mString);
		try {
			State = 96;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MSTRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 94; mSingleString();
				}
				break;
			case MSTARTMLSTRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 95; mlString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MSingleStringContext : ParserRuleContext {
		public ITerminalNode MSTRING() { return GetToken(MFSHParser.MSTRING, 0); }
		public MSingleStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mSingleString; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMSingleString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MSingleStringContext mSingleString() {
		MSingleStringContext _localctx = new MSingleStringContext(Context, State);
		EnterRule(_localctx, 22, RULE_mSingleString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; Match(MSTRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MlStringContext : ParserRuleContext {
		public ITerminalNode MSTARTMLSTRING() { return GetToken(MFSHParser.MSTARTMLSTRING, 0); }
		public ITerminalNode MMLENDSTRING() { return GetToken(MFSHParser.MMLENDSTRING, 0); }
		public MlContContext[] mlCont() {
			return GetRuleContexts<MlContContext>();
		}
		public MlContContext mlCont(int i) {
			return GetRuleContext<MlContContext>(i);
		}
		public MlTextContext[] mlText() {
			return GetRuleContexts<MlTextContext>();
		}
		public MlTextContext mlText(int i) {
			return GetRuleContext<MlTextContext>(i);
		}
		public MlStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mlString; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMlString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MlStringContext mlString() {
		MlStringContext _localctx = new MlStringContext(Context, State);
		EnterRule(_localctx, 24, RULE_mlString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(MSTARTMLSTRING);
			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MLCONT) {
				{
				State = 101; mlCont();
				}
			}

			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MLTEXT) {
				{
				{
				State = 104; mlText();
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MLCONT) {
					{
					State = 105; mlCont();
					}
				}

				}
				}
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 113; Match(MMLENDSTRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MlContContext : ParserRuleContext {
		public ITerminalNode MLCONT() { return GetToken(MFSHParser.MLCONT, 0); }
		public MlContContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mlCont; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMlCont(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MlContContext mlCont() {
		MlContContext _localctx = new MlContContext(Context, State);
		EnterRule(_localctx, 26, RULE_mlCont);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; Match(MLCONT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MlTextContext : ParserRuleContext {
		public ITerminalNode MLTEXT() { return GetToken(MFSHParser.MLTEXT, 0); }
		public MlTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mlText; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMlText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MlTextContext mlText() {
		MlTextContext _localctx = new MlTextContext(Context, State);
		EnterRule(_localctx, 28, RULE_mlText);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(MLTEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x18', 'z', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', '#', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '&', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x6', '\x4', '.', '\n', '\x4', '\r', 
		'\x4', '\xE', '\x4', '/', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x39', 
		'\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\a', '\t', 'G', '\n', '\t', '\f', '\t', '\xE', 
		'\t', 'J', '\v', '\t', '\x5', '\t', 'L', '\n', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\a', '\n', 'V', '\n', '\n', '\f', '\n', '\xE', '\n', 'Y', 
		'\v', '\n', '\x5', '\n', '[', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x63', '\n', 
		'\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 
		'i', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 'm', '\n', 
		'\xE', '\a', '\xE', 'o', '\n', '\xE', '\f', '\xE', '\xE', '\xE', 'r', 
		'\v', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x2', '\x2', '\x11', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', '\x2', '\x3', '\x4', '\x2', '\x4', '\x4', '\xF', 
		'\xF', '\x2', 'y', '\x2', '$', '\x3', '\x2', '\x2', '\x2', '\x4', ')', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '+', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\n', '\x38', '\x3', '\x2', '\x2', 
		'\x2', '\f', ':', '\x3', '\x2', '\x2', '\x2', '\xE', '=', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '@', '\x3', '\x2', '\x2', '\x2', '\x12', 'O', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '^', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x18', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x66', '\x3', '\x2', '\x2', '\x2', '\x1C', 'u', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', 'w', '\x3', '\x2', '\x2', '\x2', ' ', '#', 
		'\x5', '\x4', '\x3', '\x2', '!', '#', '\x5', '\x6', '\x4', '\x2', '\"', 
		' ', '\x3', '\x2', '\x2', '\x2', '\"', '!', '\x3', '\x2', '\x2', '\x2', 
		'#', '&', '\x3', '\x2', '\x2', '\x2', '$', '\"', '\x3', '\x2', '\x2', 
		'\x2', '$', '%', '\x3', '\x2', '\x2', '\x2', '%', '\'', '\x3', '\x2', 
		'\x2', '\x2', '&', '$', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', '\x2', 
		'\x2', '\x3', '(', '\x3', '\x3', '\x2', '\x2', '\x2', ')', '*', '\t', 
		'\x2', '\x2', '\x2', '*', '\x5', '\x3', '\x2', '\x2', '\x2', '+', '-', 
		'\x5', '\b', '\x5', '\x2', ',', '.', '\x5', '\n', '\x6', '\x2', '-', ',', 
		'\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', '/', 
		'-', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\a', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\a', '\x3', 
		'\x2', '\x2', '\x32', '\t', '\x3', '\x2', '\x2', '\x2', '\x33', '\x39', 
		'\x5', '\f', '\a', '\x2', '\x34', '\x39', '\x5', '\xE', '\b', '\x2', '\x35', 
		'\x39', '\x5', '\x10', '\t', '\x2', '\x36', '\x39', '\x5', '\x12', '\n', 
		'\x2', '\x37', '\x39', '\x5', '\x14', '\v', '\x2', '\x38', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x34', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x38', '\x36', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', '\v', '\x3', 
		'\x2', '\x2', '\x2', ':', ';', '\a', '\a', '\x2', '\x2', ';', '<', '\a', 
		'\r', '\x2', '\x2', '<', '\r', '\x3', '\x2', '\x2', '\x2', '=', '>', '\a', 
		'\b', '\x2', '\x2', '>', '?', '\a', '\r', '\x2', '\x2', '?', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '@', '\x41', '\a', '\t', '\x2', '\x2', '\x41', '\x42', 
		'\a', '\x13', '\x2', '\x2', '\x42', 'K', '\a', '\x10', '\x2', '\x2', '\x43', 
		'H', '\a', '\x13', '\x2', '\x2', '\x44', '\x45', '\a', '\x11', '\x2', 
		'\x2', '\x45', 'G', '\a', '\x13', '\x2', '\x2', '\x46', '\x44', '\x3', 
		'\x2', '\x2', '\x2', 'G', 'J', '\x3', '\x2', '\x2', '\x2', 'H', '\x46', 
		'\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x3', '\x2', '\x2', '\x2', 'I', 
		'L', '\x3', '\x2', '\x2', '\x2', 'J', 'H', '\x3', '\x2', '\x2', '\x2', 
		'K', '\x43', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x3', '\x2', '\x2', 
		'\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\a', '\x12', '\x2', 
		'\x2', 'N', '\x11', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\a', '\v', 
		'\x2', '\x2', 'P', 'Q', '\a', '\x13', '\x2', '\x2', 'Q', 'Z', '\a', '\x10', 
		'\x2', '\x2', 'R', 'W', '\x5', '\x16', '\f', '\x2', 'S', 'T', '\a', '\x11', 
		'\x2', '\x2', 'T', 'V', '\x5', '\x16', '\f', '\x2', 'U', 'S', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'Y', '\x3', '\x2', '\x2', '\x2', 'W', 'U', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', '[', '\x3', '\x2', 
		'\x2', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Z', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '[', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\x3', 
		'\x2', '\x2', '\x2', '\\', ']', '\a', '\x12', '\x2', '\x2', ']', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '^', '_', '\a', '\n', '\x2', '\x2', '_', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x63', '\x5', '\x18', '\r', '\x2', '\x61', 
		'\x63', '\x5', '\x1A', '\xE', '\x2', '\x62', '`', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\x65', '\a', '\r', '\x2', '\x2', '\x65', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x66', 'h', '\a', '\xE', '\x2', '\x2', 
		'g', 'i', '\x5', '\x1C', '\xF', '\x2', 'h', 'g', '\x3', '\x2', '\x2', 
		'\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 'i', 'p', '\x3', '\x2', '\x2', 
		'\x2', 'j', 'l', '\x5', '\x1E', '\x10', '\x2', 'k', 'm', '\x5', '\x1C', 
		'\xF', '\x2', 'l', 'k', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', 
		'\x2', '\x2', 'm', 'o', '\x3', '\x2', '\x2', '\x2', 'n', 'j', '\x3', '\x2', 
		'\x2', '\x2', 'o', 'r', '\x3', '\x2', '\x2', '\x2', 'p', 'n', '\x3', '\x2', 
		'\x2', '\x2', 'p', 'q', '\x3', '\x2', '\x2', '\x2', 'q', 's', '\x3', '\x2', 
		'\x2', '\x2', 'r', 'p', '\x3', '\x2', '\x2', '\x2', 's', 't', '\a', '\x17', 
		'\x2', '\x2', 't', '\x1B', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\a', 
		'\x16', '\x2', '\x2', 'v', '\x1D', '\x3', '\x2', '\x2', '\x2', 'w', 'x', 
		'\a', '\x18', '\x2', '\x2', 'x', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\"', '$', '/', '\x38', 'H', 'K', 'W', 'Z', '\x62', 'h', 'l', 'p',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MFSH
