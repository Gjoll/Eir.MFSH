//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MFSHParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MFSH {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class MFSHParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		MSTART=1, LINE=2, LASTLINE=3, BLANKLINE=4, BLANKLASTLINE=5, CR=6, Err=7, 
		MINCLUDE=8, MUSE=9, MMACRO=10, MEND=11, MAPPLY=12, MMODEEND=13, MMODECONT=14, 
		MSTRING=15, MSTARTMLSTRING=16, MOPAR=17, MCOMMA=18, MCPAR=19, MPNAME=20, 
		MWS=21, MCR=22, MErr=23, MLCONT=24, MMLENDSTRING=25, MLTEXT=26;
	public const int
		RULE_document = 0, RULE_fsh = 1, RULE_mCommands = 2, RULE_mModeStart = 3, 
		RULE_mModeEnd = 4, RULE_mCommand = 5, RULE_mInclude = 6, RULE_mUse = 7, 
		RULE_mMacro = 8, RULE_mApply = 9, RULE_mEnd = 10, RULE_mString = 11, RULE_mSingleString = 12, 
		RULE_mlString = 13, RULE_mlCont = 14, RULE_mlText = 15;
	public static readonly string[] ruleNames = {
		"document", "fsh", "mCommands", "mModeStart", "mModeEnd", "mCommand", 
		"mInclude", "mUse", "mMacro", "mApply", "mEnd", "mString", "mSingleString", 
		"mlString", "mlCont", "mlText"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'include'", "'use'", 
		"'macro'", "'end'", "'apply'", null, null, null, null, "'('", "','", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "MSTART", "LINE", "LASTLINE", "BLANKLINE", "BLANKLASTLINE", "CR", 
		"Err", "MINCLUDE", "MUSE", "MMACRO", "MEND", "MAPPLY", "MMODEEND", "MMODECONT", 
		"MSTRING", "MSTARTMLSTRING", "MOPAR", "MCOMMA", "MCPAR", "MPNAME", "MWS", 
		"MCR", "MErr", "MLCONT", "MMLENDSTRING", "MLTEXT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MFSHParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MFSHParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MFSHParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MFSHParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocumentContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(MFSHParser.Eof, 0); }
		public FshContext[] fsh() {
			return GetRuleContexts<FshContext>();
		}
		public FshContext fsh(int i) {
			return GetRuleContext<FshContext>(i);
		}
		public MCommandsContext[] mCommands() {
			return GetRuleContexts<MCommandsContext>();
		}
		public MCommandsContext mCommands(int i) {
			return GetRuleContext<MCommandsContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MSTART) | (1L << LINE) | (1L << LASTLINE) | (1L << BLANKLINE) | (1L << BLANKLASTLINE))) != 0)) {
				{
				State = 34;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LINE:
				case LASTLINE:
				case BLANKLINE:
				case BLANKLASTLINE:
					{
					State = 32; fsh();
					}
					break;
				case MSTART:
					{
					State = 33; mCommands();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 38;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 39; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FshContext : ParserRuleContext {
		public ITerminalNode LINE() { return GetToken(MFSHParser.LINE, 0); }
		public ITerminalNode BLANKLINE() { return GetToken(MFSHParser.BLANKLINE, 0); }
		public ITerminalNode LASTLINE() { return GetToken(MFSHParser.LASTLINE, 0); }
		public ITerminalNode BLANKLASTLINE() { return GetToken(MFSHParser.BLANKLASTLINE, 0); }
		public FshContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fsh; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFsh(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FshContext fsh() {
		FshContext _localctx = new FshContext(Context, State);
		EnterRule(_localctx, 2, RULE_fsh);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LINE) | (1L << LASTLINE) | (1L << BLANKLINE) | (1L << BLANKLASTLINE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MCommandsContext : ParserRuleContext {
		public MModeStartContext mModeStart() {
			return GetRuleContext<MModeStartContext>(0);
		}
		public MModeEndContext mModeEnd() {
			return GetRuleContext<MModeEndContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(MFSHParser.Eof, 0); }
		public MCommandContext[] mCommand() {
			return GetRuleContexts<MCommandContext>();
		}
		public MCommandContext mCommand(int i) {
			return GetRuleContext<MCommandContext>(i);
		}
		public MCommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mCommands; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMCommands(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MCommandsContext mCommands() {
		MCommandsContext _localctx = new MCommandsContext(Context, State);
		EnterRule(_localctx, 4, RULE_mCommands);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43; mModeStart();
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 44; mCommand();
				}
				}
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MINCLUDE) | (1L << MUSE) | (1L << MMACRO) | (1L << MEND) | (1L << MAPPLY))) != 0) );
			State = 51;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MMODEEND:
				{
				State = 49; mModeEnd();
				}
				break;
			case Eof:
				{
				State = 50; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MModeStartContext : ParserRuleContext {
		public ITerminalNode MSTART() { return GetToken(MFSHParser.MSTART, 0); }
		public MModeStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mModeStart; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMModeStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MModeStartContext mModeStart() {
		MModeStartContext _localctx = new MModeStartContext(Context, State);
		EnterRule(_localctx, 6, RULE_mModeStart);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53; Match(MSTART);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MModeEndContext : ParserRuleContext {
		public ITerminalNode MMODEEND() { return GetToken(MFSHParser.MMODEEND, 0); }
		public MModeEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mModeEnd; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMModeEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MModeEndContext mModeEnd() {
		MModeEndContext _localctx = new MModeEndContext(Context, State);
		EnterRule(_localctx, 8, RULE_mModeEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; Match(MMODEEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MCommandContext : ParserRuleContext {
		public MIncludeContext mInclude() {
			return GetRuleContext<MIncludeContext>(0);
		}
		public MUseContext mUse() {
			return GetRuleContext<MUseContext>(0);
		}
		public MMacroContext mMacro() {
			return GetRuleContext<MMacroContext>(0);
		}
		public MApplyContext mApply() {
			return GetRuleContext<MApplyContext>(0);
		}
		public MEndContext mEnd() {
			return GetRuleContext<MEndContext>(0);
		}
		public MCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mCommand; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MCommandContext mCommand() {
		MCommandContext _localctx = new MCommandContext(Context, State);
		EnterRule(_localctx, 10, RULE_mCommand);
		try {
			State = 62;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MINCLUDE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 57; mInclude();
				}
				break;
			case MUSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 58; mUse();
				}
				break;
			case MMACRO:
				EnterOuterAlt(_localctx, 3);
				{
				State = 59; mMacro();
				}
				break;
			case MAPPLY:
				EnterOuterAlt(_localctx, 4);
				{
				State = 60; mApply();
				}
				break;
			case MEND:
				EnterOuterAlt(_localctx, 5);
				{
				State = 61; mEnd();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MIncludeContext : ParserRuleContext {
		public ITerminalNode MINCLUDE() { return GetToken(MFSHParser.MINCLUDE, 0); }
		public ITerminalNode MSTRING() { return GetToken(MFSHParser.MSTRING, 0); }
		public MIncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mInclude; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMInclude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MIncludeContext mInclude() {
		MIncludeContext _localctx = new MIncludeContext(Context, State);
		EnterRule(_localctx, 12, RULE_mInclude);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64; Match(MINCLUDE);
			State = 65; Match(MSTRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MUseContext : ParserRuleContext {
		public ITerminalNode MUSE() { return GetToken(MFSHParser.MUSE, 0); }
		public ITerminalNode MSTRING() { return GetToken(MFSHParser.MSTRING, 0); }
		public MUseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mUse; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMUse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MUseContext mUse() {
		MUseContext _localctx = new MUseContext(Context, State);
		EnterRule(_localctx, 14, RULE_mUse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; Match(MUSE);
			State = 68; Match(MSTRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MMacroContext : ParserRuleContext {
		public ITerminalNode MMACRO() { return GetToken(MFSHParser.MMACRO, 0); }
		public ITerminalNode[] MPNAME() { return GetTokens(MFSHParser.MPNAME); }
		public ITerminalNode MPNAME(int i) {
			return GetToken(MFSHParser.MPNAME, i);
		}
		public ITerminalNode MOPAR() { return GetToken(MFSHParser.MOPAR, 0); }
		public ITerminalNode MCPAR() { return GetToken(MFSHParser.MCPAR, 0); }
		public ITerminalNode[] MCOMMA() { return GetTokens(MFSHParser.MCOMMA); }
		public ITerminalNode MCOMMA(int i) {
			return GetToken(MFSHParser.MCOMMA, i);
		}
		public MMacroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mMacro; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMMacro(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MMacroContext mMacro() {
		MMacroContext _localctx = new MMacroContext(Context, State);
		EnterRule(_localctx, 16, RULE_mMacro);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; Match(MMACRO);
			State = 71; Match(MPNAME);
			{
			State = 72; Match(MOPAR);
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MPNAME) {
				{
				State = 73; Match(MPNAME);
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==MCOMMA) {
					{
					{
					State = 74; Match(MCOMMA);
					State = 75; Match(MPNAME);
					}
					}
					State = 80;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 83; Match(MCPAR);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MApplyContext : ParserRuleContext {
		public ITerminalNode MAPPLY() { return GetToken(MFSHParser.MAPPLY, 0); }
		public ITerminalNode MPNAME() { return GetToken(MFSHParser.MPNAME, 0); }
		public ITerminalNode MOPAR() { return GetToken(MFSHParser.MOPAR, 0); }
		public ITerminalNode MCPAR() { return GetToken(MFSHParser.MCPAR, 0); }
		public MStringContext[] mString() {
			return GetRuleContexts<MStringContext>();
		}
		public MStringContext mString(int i) {
			return GetRuleContext<MStringContext>(i);
		}
		public ITerminalNode[] MCOMMA() { return GetTokens(MFSHParser.MCOMMA); }
		public ITerminalNode MCOMMA(int i) {
			return GetToken(MFSHParser.MCOMMA, i);
		}
		public MApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mApply; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMApply(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MApplyContext mApply() {
		MApplyContext _localctx = new MApplyContext(Context, State);
		EnterRule(_localctx, 18, RULE_mApply);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; Match(MAPPLY);
			State = 86; Match(MPNAME);
			State = 87; Match(MOPAR);
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MSTRING || _la==MSTARTMLSTRING) {
				{
				State = 88; mString();
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==MCOMMA) {
					{
					{
					State = 89; Match(MCOMMA);
					State = 90; mString();
					}
					}
					State = 95;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 98; Match(MCPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MEndContext : ParserRuleContext {
		public ITerminalNode MEND() { return GetToken(MFSHParser.MEND, 0); }
		public MEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mEnd; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MEndContext mEnd() {
		MEndContext _localctx = new MEndContext(Context, State);
		EnterRule(_localctx, 20, RULE_mEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(MEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MStringContext : ParserRuleContext {
		public MSingleStringContext mSingleString() {
			return GetRuleContext<MSingleStringContext>(0);
		}
		public MlStringContext mlString() {
			return GetRuleContext<MlStringContext>(0);
		}
		public MStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mString; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MStringContext mString() {
		MStringContext _localctx = new MStringContext(Context, State);
		EnterRule(_localctx, 22, RULE_mString);
		try {
			State = 104;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MSTRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 102; mSingleString();
				}
				break;
			case MSTARTMLSTRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 103; mlString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MSingleStringContext : ParserRuleContext {
		public ITerminalNode MSTRING() { return GetToken(MFSHParser.MSTRING, 0); }
		public MSingleStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mSingleString; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMSingleString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MSingleStringContext mSingleString() {
		MSingleStringContext _localctx = new MSingleStringContext(Context, State);
		EnterRule(_localctx, 24, RULE_mSingleString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; Match(MSTRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MlStringContext : ParserRuleContext {
		public ITerminalNode MSTARTMLSTRING() { return GetToken(MFSHParser.MSTARTMLSTRING, 0); }
		public ITerminalNode MMLENDSTRING() { return GetToken(MFSHParser.MMLENDSTRING, 0); }
		public MlContContext[] mlCont() {
			return GetRuleContexts<MlContContext>();
		}
		public MlContContext mlCont(int i) {
			return GetRuleContext<MlContContext>(i);
		}
		public MlTextContext[] mlText() {
			return GetRuleContexts<MlTextContext>();
		}
		public MlTextContext mlText(int i) {
			return GetRuleContext<MlTextContext>(i);
		}
		public MlStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mlString; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMlString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MlStringContext mlString() {
		MlStringContext _localctx = new MlStringContext(Context, State);
		EnterRule(_localctx, 26, RULE_mlString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(MSTARTMLSTRING);
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MLCONT) {
				{
				State = 109; mlCont();
				}
			}

			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MLTEXT) {
				{
				{
				State = 112; mlText();
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MLCONT) {
					{
					State = 113; mlCont();
					}
				}

				}
				}
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 121; Match(MMLENDSTRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MlContContext : ParserRuleContext {
		public ITerminalNode MLCONT() { return GetToken(MFSHParser.MLCONT, 0); }
		public MlContContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mlCont; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMlCont(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MlContContext mlCont() {
		MlContContext _localctx = new MlContContext(Context, State);
		EnterRule(_localctx, 28, RULE_mlCont);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; Match(MLCONT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MlTextContext : ParserRuleContext {
		public ITerminalNode MLTEXT() { return GetToken(MFSHParser.MLTEXT, 0); }
		public MlTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mlText; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMFSHParserVisitor<TResult> typedVisitor = visitor as IMFSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMlText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MlTextContext mlText() {
		MlTextContext _localctx = new MlTextContext(Context, State);
		EnterRule(_localctx, 30, RULE_mlText);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125; Match(MLTEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1C', '\x82', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '%', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '(', '\v', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x6', 
		'\x4', '\x30', '\n', '\x4', '\r', '\x4', '\xE', '\x4', '\x31', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '\x36', '\n', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x41', '\n', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\a', '\n', 'O', '\n', '\n', '\f', '\n', '\xE', '\n', 'R', '\v', 
		'\n', '\x5', '\n', 'T', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', 
		'\v', '^', '\n', '\v', '\f', '\v', '\xE', '\v', '\x61', '\v', '\v', '\x5', 
		'\v', '\x63', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\r', '\x3', '\r', '\x5', '\r', 'k', '\n', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 'q', '\n', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 'u', '\n', '\xF', '\a', '\xF', 
		'w', '\n', '\xF', '\f', '\xF', '\xE', '\xF', 'z', '\v', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x2', '\x2', '\x12', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\x2', '\x3', '\x3', '\x2', '\x4', '\a', '\x2', '\x81', '\x2', 
		'&', '\x3', '\x2', '\x2', '\x2', '\x4', '+', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '-', '\x3', '\x2', '\x2', '\x2', '\b', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\x39', '\x3', '\x2', '\x2', '\x2', '\f', '@', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\x42', '\x3', '\x2', '\x2', '\x2', '\x10', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\x12', 'H', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'W', '\x3', '\x2', '\x2', '\x2', '\x16', '\x66', '\x3', '\x2', '\x2', 
		'\x2', '\x18', 'j', '\x3', '\x2', '\x2', '\x2', '\x1A', 'l', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', 'n', '\x3', '\x2', '\x2', '\x2', '\x1E', '}', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\x7F', '\x3', '\x2', '\x2', '\x2', '\"', '%', 
		'\x5', '\x4', '\x3', '\x2', '#', '%', '\x5', '\x6', '\x4', '\x2', '$', 
		'\"', '\x3', '\x2', '\x2', '\x2', '$', '#', '\x3', '\x2', '\x2', '\x2', 
		'%', '(', '\x3', '\x2', '\x2', '\x2', '&', '$', '\x3', '\x2', '\x2', '\x2', 
		'&', '\'', '\x3', '\x2', '\x2', '\x2', '\'', ')', '\x3', '\x2', '\x2', 
		'\x2', '(', '&', '\x3', '\x2', '\x2', '\x2', ')', '*', '\a', '\x2', '\x2', 
		'\x3', '*', '\x3', '\x3', '\x2', '\x2', '\x2', '+', ',', '\t', '\x2', 
		'\x2', '\x2', ',', '\x5', '\x3', '\x2', '\x2', '\x2', '-', '/', '\x5', 
		'\b', '\x5', '\x2', '.', '\x30', '\x5', '\f', '\a', '\x2', '/', '.', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x31', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x35', '\x3', '\x2', '\x2', '\x2', '\x33', '\x36', '\x5', 
		'\n', '\x6', '\x2', '\x34', '\x36', '\a', '\x2', '\x2', '\x3', '\x35', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x35', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\a', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\a', 
		'\x3', '\x2', '\x2', '\x38', '\t', '\x3', '\x2', '\x2', '\x2', '\x39', 
		':', '\a', '\xF', '\x2', '\x2', ':', '\v', '\x3', '\x2', '\x2', '\x2', 
		';', '\x41', '\x5', '\xE', '\b', '\x2', '<', '\x41', '\x5', '\x10', '\t', 
		'\x2', '=', '\x41', '\x5', '\x12', '\n', '\x2', '>', '\x41', '\x5', '\x14', 
		'\v', '\x2', '?', '\x41', '\x5', '\x16', '\f', '\x2', '@', ';', '\x3', 
		'\x2', '\x2', '\x2', '@', '<', '\x3', '\x2', '\x2', '\x2', '@', '=', '\x3', 
		'\x2', '\x2', '\x2', '@', '>', '\x3', '\x2', '\x2', '\x2', '@', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x41', '\r', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x43', '\a', '\n', '\x2', '\x2', '\x43', '\x44', '\a', '\x11', '\x2', 
		'\x2', '\x44', '\xF', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\a', 
		'\v', '\x2', '\x2', '\x46', 'G', '\a', '\x11', '\x2', '\x2', 'G', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'H', 'I', '\a', '\f', '\x2', '\x2', 'I', 'J', 
		'\a', '\x16', '\x2', '\x2', 'J', 'S', '\a', '\x13', '\x2', '\x2', 'K', 
		'P', '\a', '\x16', '\x2', '\x2', 'L', 'M', '\a', '\x14', '\x2', '\x2', 
		'M', 'O', '\a', '\x16', '\x2', '\x2', 'N', 'L', '\x3', '\x2', '\x2', '\x2', 
		'O', 'R', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 
		'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', 'T', '\x3', '\x2', '\x2', '\x2', 
		'R', 'P', '\x3', '\x2', '\x2', '\x2', 'S', 'K', '\x3', '\x2', '\x2', '\x2', 
		'S', 'T', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 
		'U', 'V', '\a', '\x15', '\x2', '\x2', 'V', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'X', '\a', '\xE', '\x2', '\x2', 'X', 'Y', '\a', '\x16', '\x2', 
		'\x2', 'Y', '\x62', '\a', '\x13', '\x2', '\x2', 'Z', '_', '\x5', '\x18', 
		'\r', '\x2', '[', '\\', '\a', '\x14', '\x2', '\x2', '\\', '^', '\x5', 
		'\x18', '\r', '\x2', ']', '[', '\x3', '\x2', '\x2', '\x2', '^', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '_', ']', '\x3', '\x2', '\x2', '\x2', '_', 
		'`', '\x3', '\x2', '\x2', '\x2', '`', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x62', 'Z', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '\x63', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\x65', '\a', '\x15', '\x2', '\x2', '\x65', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\a', '\r', '\x2', '\x2', 
		'g', '\x17', '\x3', '\x2', '\x2', '\x2', 'h', 'k', '\x5', '\x1A', '\xE', 
		'\x2', 'i', 'k', '\x5', '\x1C', '\xF', '\x2', 'j', 'h', '\x3', '\x2', 
		'\x2', '\x2', 'j', 'i', '\x3', '\x2', '\x2', '\x2', 'k', '\x19', '\x3', 
		'\x2', '\x2', '\x2', 'l', 'm', '\a', '\x11', '\x2', '\x2', 'm', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', 'n', 'p', '\a', '\x12', '\x2', '\x2', 'o', 
		'q', '\x5', '\x1E', '\x10', '\x2', 'p', 'o', '\x3', '\x2', '\x2', '\x2', 
		'p', 'q', '\x3', '\x2', '\x2', '\x2', 'q', 'x', '\x3', '\x2', '\x2', '\x2', 
		'r', 't', '\x5', ' ', '\x11', '\x2', 's', 'u', '\x5', '\x1E', '\x10', 
		'\x2', 't', 's', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'w', '\x3', '\x2', '\x2', '\x2', 'v', 'r', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'z', '\x3', '\x2', '\x2', '\x2', 'x', 'v', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'y', '\x3', '\x2', '\x2', '\x2', 'y', '{', '\x3', '\x2', '\x2', 
		'\x2', 'z', 'x', '\x3', '\x2', '\x2', '\x2', '{', '|', '\a', '\x1B', '\x2', 
		'\x2', '|', '\x1D', '\x3', '\x2', '\x2', '\x2', '}', '~', '\a', '\x1A', 
		'\x2', '\x2', '~', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', 
		'\a', '\x1C', '\x2', '\x2', '\x80', '!', '\x3', '\x2', '\x2', '\x2', '\xF', 
		'$', '&', '\x31', '\x35', '@', 'P', 'S', '_', '\x62', 'j', 'p', 't', 'x',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MFSH
