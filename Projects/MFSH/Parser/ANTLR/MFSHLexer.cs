//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MFSHLexer.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MFSH.Parser {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class MFSHLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		FSHLINE=1, INCLUDE=2, USE=3, MACRO=4, END=5, APPLY=6, STRING=7, MULTILINE_STRING=8, 
		OPAR=9, COMMA=10, CPAR=11, NAME=12, WS=13;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"FSHLINE", "INCLUDE", "USE", "MACRO", "END", "APPLY", "STRING", "MULTILINE_STRING", 
		"OPAR", "COMMA", "CPAR", "NAME", "WS"
	};


	public MFSHLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MFSHLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'FshLine'", "'include'", "'use'", "'macro'", "'end'", "'apply'", 
		null, null, "'('", "','", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FSHLINE", "INCLUDE", "USE", "MACRO", "END", "APPLY", "STRING", 
		"MULTILINE_STRING", "OPAR", "COMMA", "CPAR", "NAME", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MFSHLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MFSHLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\xF', '\x81', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\a', '\b', 'H', '\n', '\b', '\f', '\b', '\xE', '\b', 
		'K', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 'T', '\n', '\t', '\f', '\t', 
		'\xE', '\t', 'W', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x6', '\r', '\x65', '\n', '\r', 
		'\r', '\r', '\xE', '\r', '\x66', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x6', '\r', 'l', '\n', '\r', '\r', '\r', '\xE', '\r', 'm', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x6', '\r', 't', '\n', '\r', '\r', 
		'\r', '\xE', '\r', 'u', '\x3', '\r', '\x5', '\r', 'y', '\n', '\r', '\x3', 
		'\xE', '\x6', '\xE', '|', '\n', '\xE', '\r', '\xE', '\xE', '\xE', '}', 
		'\x3', '\xE', '\x3', '\xE', '\x3', 'U', '\x2', '\xF', '\x3', '\x3', '\x5', 
		'\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', '\t', 
		'\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', '\x19', '\xE', 
		'\x1B', '\xF', '\x3', '\x2', '\x6', '\x4', '\x2', '$', '$', '^', '^', 
		'\x4', '\x2', '\x43', '\\', '\x63', '|', '\x5', '\x2', '\x32', ';', '\x43', 
		'\\', '\x63', '|', '\x5', '\x2', '\v', '\f', '\xF', '\xF', '\"', '\"', 
		'\x2', '\x8A', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x3', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x5', '%', '\x3', '\x2', '\x2', '\x2', '\a', '-', 
		'\x3', '\x2', '\x2', '\x2', '\t', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\v', '\x37', '\x3', '\x2', '\x2', '\x2', '\r', ';', '\x3', '\x2', '\x2', 
		'\x2', '\xF', '\x41', '\x3', '\x2', '\x2', '\x2', '\x11', 'N', '\x3', 
		'\x2', '\x2', '\x2', '\x13', '\\', '\x3', '\x2', '\x2', '\x2', '\x15', 
		'^', '\x3', '\x2', '\x2', '\x2', '\x17', '`', '\x3', '\x2', '\x2', '\x2', 
		'\x19', 'x', '\x3', '\x2', '\x2', '\x2', '\x1B', '{', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\x1E', '\a', 'H', '\x2', '\x2', '\x1E', '\x1F', '\a', 
		'u', '\x2', '\x2', '\x1F', ' ', '\a', 'j', '\x2', '\x2', ' ', '!', '\a', 
		'N', '\x2', '\x2', '!', '\"', '\a', 'k', '\x2', '\x2', '\"', '#', '\a', 
		'p', '\x2', '\x2', '#', '$', '\a', 'g', '\x2', '\x2', '$', '\x4', '\x3', 
		'\x2', '\x2', '\x2', '%', '&', '\a', 'k', '\x2', '\x2', '&', '\'', '\a', 
		'p', '\x2', '\x2', '\'', '(', '\a', '\x65', '\x2', '\x2', '(', ')', '\a', 
		'n', '\x2', '\x2', ')', '*', '\a', 'w', '\x2', '\x2', '*', '+', '\a', 
		'\x66', '\x2', '\x2', '+', ',', '\a', 'g', '\x2', '\x2', ',', '\x6', '\x3', 
		'\x2', '\x2', '\x2', '-', '.', '\a', 'w', '\x2', '\x2', '.', '/', '\a', 
		'u', '\x2', '\x2', '/', '\x30', '\a', 'g', '\x2', '\x2', '\x30', '\b', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\a', 'o', '\x2', '\x2', '\x32', 
		'\x33', '\a', '\x63', '\x2', '\x2', '\x33', '\x34', '\a', '\x65', '\x2', 
		'\x2', '\x34', '\x35', '\a', 't', '\x2', '\x2', '\x35', '\x36', '\a', 
		'q', '\x2', '\x2', '\x36', '\n', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', 
		'\a', 'g', '\x2', '\x2', '\x38', '\x39', '\a', 'p', '\x2', '\x2', '\x39', 
		':', '\a', '\x66', '\x2', '\x2', ':', '\f', '\x3', '\x2', '\x2', '\x2', 
		';', '<', '\a', '\x63', '\x2', '\x2', '<', '=', '\a', 'r', '\x2', '\x2', 
		'=', '>', '\a', 'r', '\x2', '\x2', '>', '?', '\a', 'n', '\x2', '\x2', 
		'?', '@', '\a', '{', '\x2', '\x2', '@', '\xE', '\x3', '\x2', '\x2', '\x2', 
		'\x41', 'I', '\a', '$', '\x2', '\x2', '\x42', 'H', '\n', '\x2', '\x2', 
		'\x2', '\x43', '\x44', '\a', '^', '\x2', '\x2', '\x44', 'H', '\a', '$', 
		'\x2', '\x2', '\x45', '\x46', '\a', '^', '\x2', '\x2', '\x46', 'H', '\a', 
		'^', '\x2', '\x2', 'G', '\x42', '\x3', '\x2', '\x2', '\x2', 'G', '\x43', 
		'\x3', '\x2', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', '\x2', '\x2', 'H', 
		'K', '\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 
		'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', 'L', '\x3', '\x2', '\x2', '\x2', 
		'K', 'I', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\a', '$', '\x2', '\x2', 
		'M', '\x10', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\a', '$', '\x2', '\x2', 
		'O', 'P', '\a', '$', '\x2', '\x2', 'P', 'Q', '\a', '$', '\x2', '\x2', 
		'Q', 'U', '\x3', '\x2', '\x2', '\x2', 'R', 'T', '\v', '\x2', '\x2', '\x2', 
		'S', 'R', '\x3', '\x2', '\x2', '\x2', 'T', 'W', '\x3', '\x2', '\x2', '\x2', 
		'U', 'V', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 
		'V', 'X', '\x3', '\x2', '\x2', '\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 
		'X', 'Y', '\a', '$', '\x2', '\x2', 'Y', 'Z', '\a', '$', '\x2', '\x2', 
		'Z', '[', '\a', '$', '\x2', '\x2', '[', '\x12', '\x3', '\x2', '\x2', '\x2', 
		'\\', ']', '\a', '*', '\x2', '\x2', ']', '\x14', '\x3', '\x2', '\x2', 
		'\x2', '^', '_', '\a', '.', '\x2', '\x2', '_', '\x16', '\x3', '\x2', '\x2', 
		'\x2', '`', '\x61', '\a', '+', '\x2', '\x2', '\x61', '\x18', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x64', '\t', '\x3', '\x2', '\x2', '\x63', '\x65', 
		'\t', '\x4', '\x2', '\x2', '\x64', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x65', '\x66', '\x3', '\x2', '\x2', '\x2', '\x66', '\x64', '\x3', '\x2', 
		'\x2', '\x2', '\x66', 'g', '\x3', '\x2', '\x2', '\x2', 'g', 'y', '\x3', 
		'\x2', '\x2', '\x2', 'h', 'i', '\a', '&', '\x2', '\x2', 'i', 'k', '\t', 
		'\x3', '\x2', '\x2', 'j', 'l', '\t', '\x4', '\x2', '\x2', 'k', 'j', '\x3', 
		'\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', '\x2', 'm', 'k', '\x3', 
		'\x2', '\x2', '\x2', 'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x3', 
		'\x2', '\x2', '\x2', 'o', 'y', '\a', '&', '\x2', '\x2', 'p', 'q', '\a', 
		'\'', '\x2', '\x2', 'q', 's', '\t', '\x3', '\x2', '\x2', 'r', 't', '\t', 
		'\x4', '\x2', '\x2', 's', 'r', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\x3', 
		'\x2', '\x2', '\x2', 'u', 's', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', 
		'\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 'w', 'y', '\a', 
		'\'', '\x2', '\x2', 'x', '\x62', '\x3', '\x2', '\x2', '\x2', 'x', 'h', 
		'\x3', '\x2', '\x2', '\x2', 'x', 'p', '\x3', '\x2', '\x2', '\x2', 'y', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', 'z', '|', '\t', '\x5', '\x2', '\x2', 
		'{', 'z', '\x3', '\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', '\x2', 
		'}', '{', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\b', '\xE', 
		'\x2', '\x2', '\x80', '\x1C', '\x3', '\x2', '\x2', '\x2', '\v', '\x2', 
		'G', 'I', 'U', '\x66', 'm', 'u', 'x', '}', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MFSH.Parser
