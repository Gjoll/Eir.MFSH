//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MFSHLexer.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MFSH.Parser {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class MFSHLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		APPLY=1, END=2, FSHLINE=3, INCLUDE=4, JSONARRAY=5, MACRO=6, USE=7, STRING=8, 
		MULTILINE_STRING=9, OPAR=10, COMMA=11, CPAR=12, GT=13, NAME=14, WS=15;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"APPLY", "END", "FSHLINE", "INCLUDE", "JSONARRAY", "MACRO", "USE", "STRING", 
		"MULTILINE_STRING", "OPAR", "COMMA", "CPAR", "GT", "NAME", "WS"
	};


	public MFSHLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MFSHLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'apply'", "'end'", "'FshLine'", "'include'", "'jsonArray'", "'macro'", 
		"'use'", null, null, "'('", "','", "')'", "'>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "APPLY", "END", "FSHLINE", "INCLUDE", "JSONARRAY", "MACRO", "USE", 
		"STRING", "MULTILINE_STRING", "OPAR", "COMMA", "CPAR", "GT", "NAME", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MFSHLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MFSHLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x11', '\x91', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\a', '\t', 'V', '\n', '\t', '\f', '\t', '\xE', '\t', 'Y', '\v', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\a', '\n', '\x62', '\n', '\n', '\f', '\n', '\xE', 
		'\n', '\x65', '\v', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', 
		'\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x6', 
		'\xF', 'u', '\n', '\xF', '\r', '\xF', '\xE', '\xF', 'v', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x6', '\xF', '|', '\n', '\xF', '\r', '\xF', 
		'\xE', '\xF', '}', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x6', '\xF', '\x84', '\n', '\xF', '\r', '\xF', '\xE', '\xF', '\x85', 
		'\x3', '\xF', '\x5', '\xF', '\x89', '\n', '\xF', '\x3', '\x10', '\x6', 
		'\x10', '\x8C', '\n', '\x10', '\r', '\x10', '\xE', '\x10', '\x8D', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x63', '\x2', '\x11', '\x3', '\x3', '\x5', 
		'\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', '\t', 
		'\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', '\x19', '\xE', 
		'\x1B', '\xF', '\x1D', '\x10', '\x1F', '\x11', '\x3', '\x2', '\x6', '\x4', 
		'\x2', '$', '$', '^', '^', '\x4', '\x2', '\x43', '\\', '\x63', '|', '\x5', 
		'\x2', '\x32', ';', '\x43', '\\', '\x63', '|', '\x5', '\x2', '\v', '\f', 
		'\xF', '\xF', '\"', '\"', '\x2', '\x9A', '\x2', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x13', '\x3', '\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x2', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\x3', '!', '\x3', '\x2', '\x2', '\x2', '\x5', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\a', '+', '\x3', '\x2', '\x2', '\x2', '\t', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\v', ';', '\x3', '\x2', '\x2', '\x2', '\r', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\xF', 'K', '\x3', '\x2', '\x2', '\x2', 
		'\x11', 'O', '\x3', '\x2', '\x2', '\x2', '\x13', '\\', '\x3', '\x2', '\x2', 
		'\x2', '\x15', 'j', '\x3', '\x2', '\x2', '\x2', '\x17', 'l', '\x3', '\x2', 
		'\x2', '\x2', '\x19', 'n', '\x3', '\x2', '\x2', '\x2', '\x1B', 'p', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', '\x88', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\a', '\x63', '\x2', '\x2', 
		'\"', '#', '\a', 'r', '\x2', '\x2', '#', '$', '\a', 'r', '\x2', '\x2', 
		'$', '%', '\a', 'n', '\x2', '\x2', '%', '&', '\a', '{', '\x2', '\x2', 
		'&', '\x4', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', 'g', '\x2', '\x2', 
		'(', ')', '\a', 'p', '\x2', '\x2', ')', '*', '\a', '\x66', '\x2', '\x2', 
		'*', '\x6', '\x3', '\x2', '\x2', '\x2', '+', ',', '\a', 'H', '\x2', '\x2', 
		',', '-', '\a', 'u', '\x2', '\x2', '-', '.', '\a', 'j', '\x2', '\x2', 
		'.', '/', '\a', 'N', '\x2', '\x2', '/', '\x30', '\a', 'k', '\x2', '\x2', 
		'\x30', '\x31', '\a', 'p', '\x2', '\x2', '\x31', '\x32', '\a', 'g', '\x2', 
		'\x2', '\x32', '\b', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\a', 
		'k', '\x2', '\x2', '\x34', '\x35', '\a', 'p', '\x2', '\x2', '\x35', '\x36', 
		'\a', '\x65', '\x2', '\x2', '\x36', '\x37', '\a', 'n', '\x2', '\x2', '\x37', 
		'\x38', '\a', 'w', '\x2', '\x2', '\x38', '\x39', '\a', '\x66', '\x2', 
		'\x2', '\x39', ':', '\a', 'g', '\x2', '\x2', ':', '\n', '\x3', '\x2', 
		'\x2', '\x2', ';', '<', '\a', 'l', '\x2', '\x2', '<', '=', '\a', 'u', 
		'\x2', '\x2', '=', '>', '\a', 'q', '\x2', '\x2', '>', '?', '\a', 'p', 
		'\x2', '\x2', '?', '@', '\a', '\x43', '\x2', '\x2', '@', '\x41', '\a', 
		't', '\x2', '\x2', '\x41', '\x42', '\a', 't', '\x2', '\x2', '\x42', '\x43', 
		'\a', '\x63', '\x2', '\x2', '\x43', '\x44', '\a', '{', '\x2', '\x2', '\x44', 
		'\f', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\a', 'o', '\x2', '\x2', 
		'\x46', 'G', '\a', '\x63', '\x2', '\x2', 'G', 'H', '\a', '\x65', '\x2', 
		'\x2', 'H', 'I', '\a', 't', '\x2', '\x2', 'I', 'J', '\a', 'q', '\x2', 
		'\x2', 'J', '\xE', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\a', 'w', '\x2', 
		'\x2', 'L', 'M', '\a', 'u', '\x2', '\x2', 'M', 'N', '\a', 'g', '\x2', 
		'\x2', 'N', '\x10', '\x3', '\x2', '\x2', '\x2', 'O', 'W', '\a', '$', '\x2', 
		'\x2', 'P', 'V', '\n', '\x2', '\x2', '\x2', 'Q', 'R', '\a', '^', '\x2', 
		'\x2', 'R', 'V', '\a', '$', '\x2', '\x2', 'S', 'T', '\a', '^', '\x2', 
		'\x2', 'T', 'V', '\a', '^', '\x2', '\x2', 'U', 'P', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'Q', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'Y', '\x3', '\x2', '\x2', '\x2', 'W', 'U', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', 'Z', '\x3', '\x2', '\x2', 
		'\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\a', '$', '\x2', 
		'\x2', '[', '\x12', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\a', '$', 
		'\x2', '\x2', ']', '^', '\a', '$', '\x2', '\x2', '^', '_', '\a', '$', 
		'\x2', '\x2', '_', '\x63', '\x3', '\x2', '\x2', '\x2', '`', '\x62', '\v', 
		'\x2', '\x2', '\x2', '\x61', '`', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x64', '\x66', '\x3', 
		'\x2', '\x2', '\x2', '\x65', '\x63', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'g', '\a', '$', '\x2', '\x2', 'g', 'h', '\a', '$', '\x2', '\x2', 'h', 
		'i', '\a', '$', '\x2', '\x2', 'i', '\x14', '\x3', '\x2', '\x2', '\x2', 
		'j', 'k', '\a', '*', '\x2', '\x2', 'k', '\x16', '\x3', '\x2', '\x2', '\x2', 
		'l', 'm', '\a', '.', '\x2', '\x2', 'm', '\x18', '\x3', '\x2', '\x2', '\x2', 
		'n', 'o', '\a', '+', '\x2', '\x2', 'o', '\x1A', '\x3', '\x2', '\x2', '\x2', 
		'p', 'q', '\a', '@', '\x2', '\x2', 'q', '\x1C', '\x3', '\x2', '\x2', '\x2', 
		'r', 't', '\t', '\x3', '\x2', '\x2', 's', 'u', '\t', '\x4', '\x2', '\x2', 
		't', 's', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 
		'v', 't', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 
		'w', '\x89', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\a', '&', '\x2', '\x2', 
		'y', '{', '\t', '\x3', '\x2', '\x2', 'z', '|', '\t', '\x4', '\x2', '\x2', 
		'{', 'z', '\x3', '\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', '\x2', 
		'}', '{', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x89', '\a', '&', '\x2', 
		'\x2', '\x80', '\x81', '\a', '\'', '\x2', '\x2', '\x81', '\x83', '\t', 
		'\x3', '\x2', '\x2', '\x82', '\x84', '\t', '\x4', '\x2', '\x2', '\x83', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '\x83', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x86', '\x87', '\x3', '\x2', '\x2', '\x2', '\x87', 
		'\x89', '\a', '\'', '\x2', '\x2', '\x88', 'r', '\x3', '\x2', '\x2', '\x2', 
		'\x88', 'x', '\x3', '\x2', '\x2', '\x2', '\x88', '\x80', '\x3', '\x2', 
		'\x2', '\x2', '\x89', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8C', 
		'\t', '\x5', '\x2', '\x2', '\x8B', '\x8A', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8B', '\x3', '\x2', 
		'\x2', '\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\b', '\x10', '\x2', '\x2', 
		'\x90', ' ', '\x3', '\x2', '\x2', '\x2', '\v', '\x2', 'U', 'W', '\x63', 
		'v', '}', '\x85', '\x88', '\x8D', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MFSH.Parser
