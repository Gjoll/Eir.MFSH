//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MFSHLexer.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MFSH.Parser {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class MFSHLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		APPLY=1, END=2, FSHLINE=3, INCLUDE=4, JSONARRAY=5, MACRO=6, PROFILE=7, 
		USE=8, STRING=9, MULTILINE_STRING=10, OPAR=11, COMMA=12, CPAR=13, GT=14, 
		NAME=15, WS=16;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"APPLY", "END", "FSHLINE", "INCLUDE", "JSONARRAY", "MACRO", "PROFILE", 
		"USE", "STRING", "MULTILINE_STRING", "OPAR", "COMMA", "CPAR", "GT", "NAME", 
		"WS"
	};


	public MFSHLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MFSHLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'apply'", "'end'", "'FshLine'", "'include'", "'jsonArray'", "'macro'", 
		"'profile'", "'use'", null, null, "'('", "','", "')'", "'>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "APPLY", "END", "FSHLINE", "INCLUDE", "JSONARRAY", "MACRO", "PROFILE", 
		"USE", "STRING", "MULTILINE_STRING", "OPAR", "COMMA", "CPAR", "GT", "NAME", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MFSHLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MFSHLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x12', '\x99', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '^', '\n', '\n', '\f', '\n', 
		'\xE', '\n', '\x61', '\v', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', 'j', '\n', 
		'\v', '\f', '\v', '\xE', '\v', 'm', '\v', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x6', '\x10', '}', '\n', '\x10', '\r', '\x10', '\xE', 
		'\x10', '~', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x6', '\x10', 
		'\x84', '\n', '\x10', '\r', '\x10', '\xE', '\x10', '\x85', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x6', '\x10', '\x8C', '\n', 
		'\x10', '\r', '\x10', '\xE', '\x10', '\x8D', '\x3', '\x10', '\x5', '\x10', 
		'\x91', '\n', '\x10', '\x3', '\x11', '\x6', '\x11', '\x94', '\n', '\x11', 
		'\r', '\x11', '\xE', '\x11', '\x95', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'k', '\x2', '\x12', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', 
		'\v', '\a', '\r', '\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', 
		'\f', '\x17', '\r', '\x19', '\xE', '\x1B', '\xF', '\x1D', '\x10', '\x1F', 
		'\x11', '!', '\x12', '\x3', '\x2', '\a', '\x6', '\x2', '\f', '\f', '\xF', 
		'\xF', '$', '$', '^', '^', '\x4', '\x2', '$', '$', '^', '^', '\x4', '\x2', 
		'\x43', '\\', '\x63', '|', '\x5', '\x2', '\x32', ';', '\x43', '\\', '\x63', 
		'|', '\x5', '\x2', '\v', '\f', '\xF', '\xF', '\"', '\"', '\x2', '\xA1', 
		'\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x2', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x3', '#', '\x3', '\x2', '\x2', '\x2', '\x5', ')', 
		'\x3', '\x2', '\x2', '\x2', '\a', '-', '\x3', '\x2', '\x2', '\x2', '\t', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\v', '=', '\x3', '\x2', '\x2', '\x2', 
		'\r', 'G', '\x3', '\x2', '\x2', '\x2', '\xF', 'M', '\x3', '\x2', '\x2', 
		'\x2', '\x11', 'U', '\x3', '\x2', '\x2', '\x2', '\x13', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '\x15', '\x64', '\x3', '\x2', '\x2', '\x2', '\x17', 'r', 
		'\x3', '\x2', '\x2', '\x2', '\x19', 't', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'v', '\x3', '\x2', '\x2', '\x2', '\x1D', 'x', '\x3', '\x2', '\x2', '\x2', 
		'\x1F', '\x90', '\x3', '\x2', '\x2', '\x2', '!', '\x93', '\x3', '\x2', 
		'\x2', '\x2', '#', '$', '\a', '\x63', '\x2', '\x2', '$', '%', '\a', 'r', 
		'\x2', '\x2', '%', '&', '\a', 'r', '\x2', '\x2', '&', '\'', '\a', 'n', 
		'\x2', '\x2', '\'', '(', '\a', '{', '\x2', '\x2', '(', '\x4', '\x3', '\x2', 
		'\x2', '\x2', ')', '*', '\a', 'g', '\x2', '\x2', '*', '+', '\a', 'p', 
		'\x2', '\x2', '+', ',', '\a', '\x66', '\x2', '\x2', ',', '\x6', '\x3', 
		'\x2', '\x2', '\x2', '-', '.', '\a', 'H', '\x2', '\x2', '.', '/', '\a', 
		'u', '\x2', '\x2', '/', '\x30', '\a', 'j', '\x2', '\x2', '\x30', '\x31', 
		'\a', 'N', '\x2', '\x2', '\x31', '\x32', '\a', 'k', '\x2', '\x2', '\x32', 
		'\x33', '\a', 'p', '\x2', '\x2', '\x33', '\x34', '\a', 'g', '\x2', '\x2', 
		'\x34', '\b', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\a', 'k', '\x2', 
		'\x2', '\x36', '\x37', '\a', 'p', '\x2', '\x2', '\x37', '\x38', '\a', 
		'\x65', '\x2', '\x2', '\x38', '\x39', '\a', 'n', '\x2', '\x2', '\x39', 
		':', '\a', 'w', '\x2', '\x2', ':', ';', '\a', '\x66', '\x2', '\x2', ';', 
		'<', '\a', 'g', '\x2', '\x2', '<', '\n', '\x3', '\x2', '\x2', '\x2', '=', 
		'>', '\a', 'l', '\x2', '\x2', '>', '?', '\a', 'u', '\x2', '\x2', '?', 
		'@', '\a', 'q', '\x2', '\x2', '@', '\x41', '\a', 'p', '\x2', '\x2', '\x41', 
		'\x42', '\a', '\x43', '\x2', '\x2', '\x42', '\x43', '\a', 't', '\x2', 
		'\x2', '\x43', '\x44', '\a', 't', '\x2', '\x2', '\x44', '\x45', '\a', 
		'\x63', '\x2', '\x2', '\x45', '\x46', '\a', '{', '\x2', '\x2', '\x46', 
		'\f', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\a', 'o', '\x2', '\x2', 'H', 
		'I', '\a', '\x63', '\x2', '\x2', 'I', 'J', '\a', '\x65', '\x2', '\x2', 
		'J', 'K', '\a', 't', '\x2', '\x2', 'K', 'L', '\a', 'q', '\x2', '\x2', 
		'L', '\xE', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\a', 'r', '\x2', '\x2', 
		'N', 'O', '\a', 't', '\x2', '\x2', 'O', 'P', '\a', 'q', '\x2', '\x2', 
		'P', 'Q', '\a', 'h', '\x2', '\x2', 'Q', 'R', '\a', 'k', '\x2', '\x2', 
		'R', 'S', '\a', 'n', '\x2', '\x2', 'S', 'T', '\a', 'g', '\x2', '\x2', 
		'T', '\x10', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\a', 'w', '\x2', '\x2', 
		'V', 'W', '\a', 'u', '\x2', '\x2', 'W', 'X', '\a', 'g', '\x2', '\x2', 
		'X', '\x12', '\x3', '\x2', '\x2', '\x2', 'Y', '_', '\a', '$', '\x2', '\x2', 
		'Z', '^', '\n', '\x2', '\x2', '\x2', '[', '\\', '\a', '^', '\x2', '\x2', 
		'\\', '^', '\t', '\x3', '\x2', '\x2', ']', 'Z', '\x3', '\x2', '\x2', '\x2', 
		']', '[', '\x3', '\x2', '\x2', '\x2', '^', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '_', ']', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', 
		'\x2', '`', '\x62', '\x3', '\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x63', '\a', '$', '\x2', '\x2', '\x63', '\x14', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\a', '$', '\x2', '\x2', '\x65', 
		'\x66', '\a', '$', '\x2', '\x2', '\x66', 'g', '\a', '$', '\x2', '\x2', 
		'g', 'k', '\x3', '\x2', '\x2', '\x2', 'h', 'j', '\v', '\x2', '\x2', '\x2', 
		'i', 'h', '\x3', '\x2', '\x2', '\x2', 'j', 'm', '\x3', '\x2', '\x2', '\x2', 
		'k', 'l', '\x3', '\x2', '\x2', '\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 
		'l', 'n', '\x3', '\x2', '\x2', '\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 
		'n', 'o', '\a', '$', '\x2', '\x2', 'o', 'p', '\a', '$', '\x2', '\x2', 
		'p', 'q', '\a', '$', '\x2', '\x2', 'q', '\x16', '\x3', '\x2', '\x2', '\x2', 
		'r', 's', '\a', '*', '\x2', '\x2', 's', '\x18', '\x3', '\x2', '\x2', '\x2', 
		't', 'u', '\a', '.', '\x2', '\x2', 'u', '\x1A', '\x3', '\x2', '\x2', '\x2', 
		'v', 'w', '\a', '+', '\x2', '\x2', 'w', '\x1C', '\x3', '\x2', '\x2', '\x2', 
		'x', 'y', '\a', '@', '\x2', '\x2', 'y', '\x1E', '\x3', '\x2', '\x2', '\x2', 
		'z', '|', '\t', '\x4', '\x2', '\x2', '{', '}', '\t', '\x5', '\x2', '\x2', 
		'|', '{', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x3', '\x2', '\x2', '\x2', 
		'~', '|', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '\x91', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\a', 
		'&', '\x2', '\x2', '\x81', '\x83', '\t', '\x4', '\x2', '\x2', '\x82', 
		'\x84', '\t', '\x5', '\x2', '\x2', '\x83', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x84', '\x85', '\x3', '\x2', '\x2', '\x2', '\x85', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x85', '\x86', '\x3', '\x2', '\x2', '\x2', '\x86', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x87', '\x91', '\a', '&', '\x2', 
		'\x2', '\x88', '\x89', '\a', '\'', '\x2', '\x2', '\x89', '\x8B', '\t', 
		'\x4', '\x2', '\x2', '\x8A', '\x8C', '\t', '\x5', '\x2', '\x2', '\x8B', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '\x8E', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'\x91', '\a', '\'', '\x2', '\x2', '\x90', 'z', '\x3', '\x2', '\x2', '\x2', 
		'\x90', '\x80', '\x3', '\x2', '\x2', '\x2', '\x90', '\x88', '\x3', '\x2', 
		'\x2', '\x2', '\x91', ' ', '\x3', '\x2', '\x2', '\x2', '\x92', '\x94', 
		'\t', '\x6', '\x2', '\x2', '\x93', '\x92', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x95', '\x3', '\x2', '\x2', '\x2', '\x95', '\x93', '\x3', '\x2', 
		'\x2', '\x2', '\x95', '\x96', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', 
		'\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\b', '\x11', '\x2', '\x2', 
		'\x98', '\"', '\x3', '\x2', '\x2', '\x2', '\v', '\x2', ']', '_', 'k', 
		'~', '\x85', '\x8D', '\x90', '\x95', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MFSH.Parser
